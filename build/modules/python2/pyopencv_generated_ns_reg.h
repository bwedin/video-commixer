static PyMethodDef methods_cv[] = {
    {"AKAZE_create", (PyCFunction)pyopencv_cv_AKAZE_create, METH_VARARGS | METH_KEYWORDS, "AKAZE_create([, descriptor_type[, descriptor_size[, descriptor_channels[, threshold[, nOctaves[, nOctaveLayers[, diffusivity]]]]]]]) -> retval"},
    {"AgastFeatureDetector_create", (PyCFunction)pyopencv_cv_AgastFeatureDetector_create, METH_VARARGS | METH_KEYWORDS, "AgastFeatureDetector_create([, threshold[, nonmaxSuppression[, type]]]) -> retval"},
    {"BFMatcher", (PyCFunction)pyopencv_cv_BFMatcher_BFMatcher, METH_VARARGS | METH_KEYWORDS, "BFMatcher([, normType[, crossCheck]]) -> <BFMatcher object>"},
    {"BOWImgDescriptorExtractor", (PyCFunction)pyopencv_cv_BOWImgDescriptorExtractor_BOWImgDescriptorExtractor, METH_VARARGS | METH_KEYWORDS, "BOWImgDescriptorExtractor(dextractor, dmatcher) -> <BOWImgDescriptorExtractor object>"},
    {"BOWKMeansTrainer", (PyCFunction)pyopencv_cv_BOWKMeansTrainer_BOWKMeansTrainer, METH_VARARGS | METH_KEYWORDS, "BOWKMeansTrainer(clusterCount[, termcrit[, attempts[, flags]]]) -> <BOWKMeansTrainer object>"},
    {"BRISK_create", (PyCFunction)pyopencv_cv_BRISK_create, METH_VARARGS | METH_KEYWORDS, "BRISK_create([, thresh[, octaves[, patternScale]]]) -> retval  or  BRISK_create(radiusList, numberList[, dMax[, dMin[, indexChange]]]) -> retval"},
    {"CamShift", (PyCFunction)pyopencv_cv_CamShift, METH_VARARGS | METH_KEYWORDS, "CamShift(probImage, window, criteria) -> retval, window"},
    {"Canny", (PyCFunction)pyopencv_cv_Canny, METH_VARARGS | METH_KEYWORDS, "Canny(image, threshold1, threshold2[, edges[, apertureSize[, L2gradient]]]) -> edges"},
    {"CascadeClassifier", (PyCFunction)pyopencv_cv_CascadeClassifier_CascadeClassifier, METH_VARARGS | METH_KEYWORDS, "CascadeClassifier([filename]) -> <CascadeClassifier object>"},
    {"CascadeClassifier_convert", (PyCFunction)pyopencv_cv_CascadeClassifier_convert, METH_VARARGS | METH_KEYWORDS, "CascadeClassifier_convert(oldcascade, newcascade) -> retval"},
    {"DMatch", (PyCFunction)pyopencv_cv_DMatch_DMatch, METH_VARARGS | METH_KEYWORDS, "DMatch() -> <DMatch object>  or  DMatch(_queryIdx, _trainIdx, _distance) -> <DMatch object>  or  DMatch(_queryIdx, _trainIdx, _imgIdx, _distance) -> <DMatch object>"},
    {"DescriptorMatcher_create", (PyCFunction)pyopencv_cv_DescriptorMatcher_create, METH_VARARGS | METH_KEYWORDS, "DescriptorMatcher_create(descriptorMatcherType) -> retval"},
    {"FastFeatureDetector_create", (PyCFunction)pyopencv_cv_FastFeatureDetector_create, METH_VARARGS | METH_KEYWORDS, "FastFeatureDetector_create([, threshold[, nonmaxSuppression[, type]]]) -> retval"},
    {"FileNode", (PyCFunction)pyopencv_cv_FileNode_FileNode, METH_VARARGS | METH_KEYWORDS, "FileNode() -> <FileNode object>"},
    {"FileStorage", (PyCFunction)pyopencv_cv_FileStorage_FileStorage, METH_VARARGS | METH_KEYWORDS, "FileStorage([source, flags[, encoding]]) -> <FileStorage object>"},
    {"FlannBasedMatcher", (PyCFunction)pyopencv_cv_FlannBasedMatcher_FlannBasedMatcher, METH_VARARGS | METH_KEYWORDS, "FlannBasedMatcher([, indexParams[, searchParams]]) -> <FlannBasedMatcher object>"},
    {"GFTTDetector_create", (PyCFunction)pyopencv_cv_GFTTDetector_create, METH_VARARGS | METH_KEYWORDS, "GFTTDetector_create([, maxCorners[, qualityLevel[, minDistance[, blockSize[, useHarrisDetector[, k]]]]]]) -> retval"},
    {"GaussianBlur", (PyCFunction)pyopencv_cv_GaussianBlur, METH_VARARGS | METH_KEYWORDS, "GaussianBlur(src, ksize, sigmaX[, dst[, sigmaY[, borderType]]]) -> dst"},
    {"HOGDescriptor", (PyCFunction)pyopencv_cv_HOGDescriptor_HOGDescriptor, METH_VARARGS | METH_KEYWORDS, "HOGDescriptor() -> <HOGDescriptor object>  or  HOGDescriptor(_winSize, _blockSize, _blockStride, _cellSize, _nbins[, _derivAperture[, _winSigma[, _histogramNormType[, _L2HysThreshold[, _gammaCorrection[, _nlevels[, _signedGradient]]]]]]]) -> <HOGDescriptor object>  or  HOGDescriptor(filename) -> <HOGDescriptor object>"},
    {"HOGDescriptor_getDaimlerPeopleDetector", (PyCFunction)pyopencv_cv_HOGDescriptor_getDaimlerPeopleDetector, METH_VARARGS | METH_KEYWORDS, "HOGDescriptor_getDaimlerPeopleDetector() -> retval"},
    {"HOGDescriptor_getDefaultPeopleDetector", (PyCFunction)pyopencv_cv_HOGDescriptor_getDefaultPeopleDetector, METH_VARARGS | METH_KEYWORDS, "HOGDescriptor_getDefaultPeopleDetector() -> retval"},
    {"HoughCircles", (PyCFunction)pyopencv_cv_HoughCircles, METH_VARARGS | METH_KEYWORDS, "HoughCircles(image, method, dp, minDist[, circles[, param1[, param2[, minRadius[, maxRadius]]]]]) -> circles"},
    {"HoughLines", (PyCFunction)pyopencv_cv_HoughLines, METH_VARARGS | METH_KEYWORDS, "HoughLines(image, rho, theta, threshold[, lines[, srn[, stn[, min_theta[, max_theta]]]]]) -> lines"},
    {"HoughLinesP", (PyCFunction)pyopencv_cv_HoughLinesP, METH_VARARGS | METH_KEYWORDS, "HoughLinesP(image, rho, theta, threshold[, lines[, minLineLength[, maxLineGap]]]) -> lines"},
    {"HuMoments", (PyCFunction)pyopencv_cv_HuMoments, METH_VARARGS | METH_KEYWORDS, "HuMoments(m[, hu]) -> hu"},
    {"KAZE_create", (PyCFunction)pyopencv_cv_KAZE_create, METH_VARARGS | METH_KEYWORDS, "KAZE_create([, extended[, upright[, threshold[, nOctaves[, nOctaveLayers[, diffusivity]]]]]]) -> retval"},
    {"KalmanFilter", (PyCFunction)pyopencv_cv_KalmanFilter_KalmanFilter, METH_VARARGS | METH_KEYWORDS, "KalmanFilter([dynamParams, measureParams[, controlParams[, type]]]) -> <KalmanFilter object>"},
    {"KeyPoint", (PyCFunction)pyopencv_cv_KeyPoint_KeyPoint, METH_VARARGS | METH_KEYWORDS, "KeyPoint([x, y, _size[, _angle[, _response[, _octave[, _class_id]]]]]) -> <KeyPoint object>"},
    {"KeyPoint_convert", (PyCFunction)pyopencv_cv_KeyPoint_convert, METH_VARARGS | METH_KEYWORDS, "KeyPoint_convert(keypoints[, keypointIndexes]) -> points2f  or  KeyPoint_convert(points2f[, size[, response[, octave[, class_id]]]]) -> keypoints"},
    {"KeyPoint_overlap", (PyCFunction)pyopencv_cv_KeyPoint_overlap, METH_VARARGS | METH_KEYWORDS, "KeyPoint_overlap(kp1, kp2) -> retval"},
    {"LUT", (PyCFunction)pyopencv_cv_LUT, METH_VARARGS | METH_KEYWORDS, "LUT(src, lut[, dst]) -> dst"},
    {"Laplacian", (PyCFunction)pyopencv_cv_Laplacian, METH_VARARGS | METH_KEYWORDS, "Laplacian(src, ddepth[, dst[, ksize[, scale[, delta[, borderType]]]]]) -> dst"},
    {"MSER_create", (PyCFunction)pyopencv_cv_MSER_create, METH_VARARGS | METH_KEYWORDS, "MSER_create([, _delta[, _min_area[, _max_area[, _max_variation[, _min_diversity[, _max_evolution[, _area_threshold[, _min_margin[, _edge_blur_size]]]]]]]]]) -> retval"},
    {"Mahalanobis", (PyCFunction)pyopencv_cv_Mahalanobis, METH_VARARGS | METH_KEYWORDS, "Mahalanobis(v1, v2, icovar) -> retval"},
    {"ORB_create", (PyCFunction)pyopencv_cv_ORB_create, METH_VARARGS | METH_KEYWORDS, "ORB_create([, nfeatures[, scaleFactor[, nlevels[, edgeThreshold[, firstLevel[, WTA_K[, scoreType[, patchSize[, fastThreshold]]]]]]]]]) -> retval"},
    {"PCABackProject", (PyCFunction)pyopencv_cv_PCABackProject, METH_VARARGS | METH_KEYWORDS, "PCABackProject(data, mean, eigenvectors[, result]) -> result"},
    {"PCACompute", (PyCFunction)pyopencv_cv_PCACompute, METH_VARARGS | METH_KEYWORDS, "PCACompute(data, mean[, eigenvectors[, maxComponents]]) -> mean, eigenvectors  or  PCACompute(data, mean, retainedVariance[, eigenvectors]) -> mean, eigenvectors"},
    {"PCAProject", (PyCFunction)pyopencv_cv_PCAProject, METH_VARARGS | METH_KEYWORDS, "PCAProject(data, mean, eigenvectors[, result]) -> result"},
    {"PSNR", (PyCFunction)pyopencv_cv_PSNR, METH_VARARGS | METH_KEYWORDS, "PSNR(src1, src2) -> retval"},
    {"RQDecomp3x3", (PyCFunction)pyopencv_cv_RQDecomp3x3, METH_VARARGS | METH_KEYWORDS, "RQDecomp3x3(src[, mtxR[, mtxQ[, Qx[, Qy[, Qz]]]]]) -> retval, mtxR, mtxQ, Qx, Qy, Qz"},
    {"Rodrigues", (PyCFunction)pyopencv_cv_Rodrigues, METH_VARARGS | METH_KEYWORDS, "Rodrigues(src[, dst[, jacobian]]) -> dst, jacobian"},
    {"SVBackSubst", (PyCFunction)pyopencv_cv_SVBackSubst, METH_VARARGS | METH_KEYWORDS, "SVBackSubst(w, u, vt, rhs[, dst]) -> dst"},
    {"SVDecomp", (PyCFunction)pyopencv_cv_SVDecomp, METH_VARARGS | METH_KEYWORDS, "SVDecomp(src[, w[, u[, vt[, flags]]]]) -> w, u, vt"},
    {"Scharr", (PyCFunction)pyopencv_cv_Scharr, METH_VARARGS | METH_KEYWORDS, "Scharr(src, ddepth, dx, dy[, dst[, scale[, delta[, borderType]]]]) -> dst"},
    {"SimpleBlobDetector_Params", (PyCFunction)pyopencv_cv_SimpleBlobDetector_Params_SimpleBlobDetector_Params, METH_VARARGS | METH_KEYWORDS, "SimpleBlobDetector_Params() -> <SimpleBlobDetector_Params object>"},
    {"SimpleBlobDetector_create", (PyCFunction)pyopencv_cv_SimpleBlobDetector_create, METH_VARARGS | METH_KEYWORDS, "SimpleBlobDetector_create([, parameters]) -> retval"},
    {"Sobel", (PyCFunction)pyopencv_cv_Sobel, METH_VARARGS | METH_KEYWORDS, "Sobel(src, ddepth, dx, dy[, dst[, ksize[, scale[, delta[, borderType]]]]]) -> dst"},
    {"StereoBM_create", (PyCFunction)pyopencv_cv_StereoBM_create, METH_VARARGS | METH_KEYWORDS, "StereoBM_create([, numDisparities[, blockSize]]) -> retval"},
    {"StereoSGBM_create", (PyCFunction)pyopencv_cv_StereoSGBM_create, METH_VARARGS | METH_KEYWORDS, "StereoSGBM_create(minDisparity, numDisparities, blockSize[, P1[, P2[, disp12MaxDiff[, preFilterCap[, uniquenessRatio[, speckleWindowSize[, speckleRange[, mode]]]]]]]]) -> retval"},
    {"Subdiv2D", (PyCFunction)pyopencv_cv_Subdiv2D_Subdiv2D, METH_VARARGS | METH_KEYWORDS, "Subdiv2D([rect]) -> <Subdiv2D object>"},
    {"VideoCapture", (PyCFunction)pyopencv_cv_VideoCapture_VideoCapture, METH_VARARGS | METH_KEYWORDS, "VideoCapture() -> <VideoCapture object>  or  VideoCapture(filename) -> <VideoCapture object>  or  VideoCapture(device) -> <VideoCapture object>"},
    {"VideoWriter", (PyCFunction)pyopencv_cv_VideoWriter_VideoWriter, METH_VARARGS | METH_KEYWORDS, "VideoWriter([filename, fourcc, fps, frameSize[, isColor]]) -> <VideoWriter object>"},
    {"VideoWriter_fourcc", (PyCFunction)pyopencv_cv_VideoWriter_fourcc, METH_VARARGS | METH_KEYWORDS, "VideoWriter_fourcc(c1, c2, c3, c4) -> retval"},
    {"absdiff", (PyCFunction)pyopencv_cv_absdiff, METH_VARARGS | METH_KEYWORDS, "absdiff(src1, src2[, dst]) -> dst"},
    {"accumulate", (PyCFunction)pyopencv_cv_accumulate, METH_VARARGS | METH_KEYWORDS, "accumulate(src, dst[, mask]) -> dst"},
    {"accumulateProduct", (PyCFunction)pyopencv_cv_accumulateProduct, METH_VARARGS | METH_KEYWORDS, "accumulateProduct(src1, src2, dst[, mask]) -> dst"},
    {"accumulateSquare", (PyCFunction)pyopencv_cv_accumulateSquare, METH_VARARGS | METH_KEYWORDS, "accumulateSquare(src, dst[, mask]) -> dst"},
    {"accumulateWeighted", (PyCFunction)pyopencv_cv_accumulateWeighted, METH_VARARGS | METH_KEYWORDS, "accumulateWeighted(src, dst, alpha[, mask]) -> dst"},
    {"adaptiveThreshold", (PyCFunction)pyopencv_cv_adaptiveThreshold, METH_VARARGS | METH_KEYWORDS, "adaptiveThreshold(src, maxValue, adaptiveMethod, thresholdType, blockSize, C[, dst]) -> dst"},
    {"add", (PyCFunction)pyopencv_cv_add, METH_VARARGS | METH_KEYWORDS, "add(src1, src2[, dst[, mask[, dtype]]]) -> dst"},
    {"addWeighted", (PyCFunction)pyopencv_cv_addWeighted, METH_VARARGS | METH_KEYWORDS, "addWeighted(src1, alpha, src2, beta, gamma[, dst[, dtype]]) -> dst"},
    {"applyColorMap", (PyCFunction)pyopencv_cv_applyColorMap, METH_VARARGS | METH_KEYWORDS, "applyColorMap(src, colormap[, dst]) -> dst"},
    {"approxPolyDP", (PyCFunction)pyopencv_cv_approxPolyDP, METH_VARARGS | METH_KEYWORDS, "approxPolyDP(curve, epsilon, closed[, approxCurve]) -> approxCurve"},
    {"arcLength", (PyCFunction)pyopencv_cv_arcLength, METH_VARARGS | METH_KEYWORDS, "arcLength(curve, closed) -> retval"},
    {"arrowedLine", (PyCFunction)pyopencv_cv_arrowedLine, METH_VARARGS | METH_KEYWORDS, "arrowedLine(img, pt1, pt2, color[, thickness[, line_type[, shift[, tipLength]]]]) -> img"},
    {"batchDistance", (PyCFunction)pyopencv_cv_batchDistance, METH_VARARGS | METH_KEYWORDS, "batchDistance(src1, src2, dtype[, dist[, nidx[, normType[, K[, mask[, update[, crosscheck]]]]]]]) -> dist, nidx"},
    {"bilateralFilter", (PyCFunction)pyopencv_cv_bilateralFilter, METH_VARARGS | METH_KEYWORDS, "bilateralFilter(src, d, sigmaColor, sigmaSpace[, dst[, borderType]]) -> dst"},
    {"bitwise_and", (PyCFunction)pyopencv_cv_bitwise_and, METH_VARARGS | METH_KEYWORDS, "bitwise_and(src1, src2[, dst[, mask]]) -> dst"},
    {"bitwise_not", (PyCFunction)pyopencv_cv_bitwise_not, METH_VARARGS | METH_KEYWORDS, "bitwise_not(src[, dst[, mask]]) -> dst"},
    {"bitwise_or", (PyCFunction)pyopencv_cv_bitwise_or, METH_VARARGS | METH_KEYWORDS, "bitwise_or(src1, src2[, dst[, mask]]) -> dst"},
    {"bitwise_xor", (PyCFunction)pyopencv_cv_bitwise_xor, METH_VARARGS | METH_KEYWORDS, "bitwise_xor(src1, src2[, dst[, mask]]) -> dst"},
    {"blur", (PyCFunction)pyopencv_cv_blur, METH_VARARGS | METH_KEYWORDS, "blur(src, ksize[, dst[, anchor[, borderType]]]) -> dst"},
    {"borderInterpolate", (PyCFunction)pyopencv_cv_borderInterpolate, METH_VARARGS | METH_KEYWORDS, "borderInterpolate(p, len, borderType) -> retval"},
    {"boundingRect", (PyCFunction)pyopencv_cv_boundingRect, METH_VARARGS | METH_KEYWORDS, "boundingRect(points) -> retval"},
    {"boxFilter", (PyCFunction)pyopencv_cv_boxFilter, METH_VARARGS | METH_KEYWORDS, "boxFilter(src, ddepth, ksize[, dst[, anchor[, normalize[, borderType]]]]) -> dst"},
    {"boxPoints", (PyCFunction)pyopencv_cv_boxPoints, METH_VARARGS | METH_KEYWORDS, "boxPoints(box[, points]) -> points"},
    {"buildOpticalFlowPyramid", (PyCFunction)pyopencv_cv_buildOpticalFlowPyramid, METH_VARARGS | METH_KEYWORDS, "buildOpticalFlowPyramid(img, winSize, maxLevel[, pyramid[, withDerivatives[, pyrBorder[, derivBorder[, tryReuseInputImage]]]]]) -> retval, pyramid"},
    {"calcBackProject", (PyCFunction)pyopencv_cv_calcBackProject, METH_VARARGS | METH_KEYWORDS, "calcBackProject(images, channels, hist, ranges, scale[, dst]) -> dst"},
    {"calcCovarMatrix", (PyCFunction)pyopencv_cv_calcCovarMatrix, METH_VARARGS | METH_KEYWORDS, "calcCovarMatrix(samples, mean, flags[, covar[, ctype]]) -> covar, mean"},
    {"calcHist", (PyCFunction)pyopencv_cv_calcHist, METH_VARARGS | METH_KEYWORDS, "calcHist(images, channels, mask, histSize, ranges[, hist[, accumulate]]) -> hist"},
    {"calcOpticalFlowFarneback", (PyCFunction)pyopencv_cv_calcOpticalFlowFarneback, METH_VARARGS | METH_KEYWORDS, "calcOpticalFlowFarneback(prev, next, flow, pyr_scale, levels, winsize, iterations, poly_n, poly_sigma, flags) -> flow"},
    {"calcOpticalFlowPyrLK", (PyCFunction)pyopencv_cv_calcOpticalFlowPyrLK, METH_VARARGS | METH_KEYWORDS, "calcOpticalFlowPyrLK(prevImg, nextImg, prevPts, nextPts[, status[, err[, winSize[, maxLevel[, criteria[, flags[, minEigThreshold]]]]]]]) -> nextPts, status, err"},
    {"calibrateCamera", (PyCFunction)pyopencv_cv_calibrateCamera, METH_VARARGS | METH_KEYWORDS, "calibrateCamera(objectPoints, imagePoints, imageSize, cameraMatrix, distCoeffs[, rvecs[, tvecs[, flags[, criteria]]]]) -> retval, cameraMatrix, distCoeffs, rvecs, tvecs"},
    {"calibrationMatrixValues", (PyCFunction)pyopencv_cv_calibrationMatrixValues, METH_VARARGS | METH_KEYWORDS, "calibrationMatrixValues(cameraMatrix, imageSize, apertureWidth, apertureHeight) -> fovx, fovy, focalLength, principalPoint, aspectRatio"},
    {"cartToPolar", (PyCFunction)pyopencv_cv_cartToPolar, METH_VARARGS | METH_KEYWORDS, "cartToPolar(x, y[, magnitude[, angle[, angleInDegrees]]]) -> magnitude, angle"},
    {"checkHardwareSupport", (PyCFunction)pyopencv_cv_checkHardwareSupport, METH_VARARGS | METH_KEYWORDS, "checkHardwareSupport(feature) -> retval"},
    {"checkRange", (PyCFunction)pyopencv_cv_checkRange, METH_VARARGS | METH_KEYWORDS, "checkRange(a[, quiet[, minVal[, maxVal]]]) -> retval, pos"},
    {"circle", (PyCFunction)pyopencv_cv_circle, METH_VARARGS | METH_KEYWORDS, "circle(img, center, radius, color[, thickness[, lineType[, shift]]]) -> img"},
    {"clipLine", (PyCFunction)pyopencv_cv_clipLine, METH_VARARGS | METH_KEYWORDS, "clipLine(imgRect, pt1, pt2) -> retval, pt1, pt2"},
    {"colorChange", (PyCFunction)pyopencv_cv_colorChange, METH_VARARGS | METH_KEYWORDS, "colorChange(src, mask[, dst[, red_mul[, green_mul[, blue_mul]]]]) -> dst"},
    {"compare", (PyCFunction)pyopencv_cv_compare, METH_VARARGS | METH_KEYWORDS, "compare(src1, src2, cmpop[, dst]) -> dst"},
    {"compareHist", (PyCFunction)pyopencv_cv_compareHist, METH_VARARGS | METH_KEYWORDS, "compareHist(H1, H2, method) -> retval"},
    {"completeSymm", (PyCFunction)pyopencv_cv_completeSymm, METH_VARARGS | METH_KEYWORDS, "completeSymm(mtx[, lowerToUpper]) -> mtx"},
    {"composeRT", (PyCFunction)pyopencv_cv_composeRT, METH_VARARGS | METH_KEYWORDS, "composeRT(rvec1, tvec1, rvec2, tvec2[, rvec3[, tvec3[, dr3dr1[, dr3dt1[, dr3dr2[, dr3dt2[, dt3dr1[, dt3dt1[, dt3dr2[, dt3dt2]]]]]]]]]]) -> rvec3, tvec3, dr3dr1, dr3dt1, dr3dr2, dr3dt2, dt3dr1, dt3dt1, dt3dr2, dt3dt2"},
    {"computeCorrespondEpilines", (PyCFunction)pyopencv_cv_computeCorrespondEpilines, METH_VARARGS | METH_KEYWORDS, "computeCorrespondEpilines(points, whichImage, F[, lines]) -> lines"},
    {"connectedComponents", (PyCFunction)pyopencv_cv_connectedComponents, METH_VARARGS | METH_KEYWORDS, "connectedComponents(image[, labels[, connectivity[, ltype]]]) -> retval, labels"},
    {"connectedComponentsWithStats", (PyCFunction)pyopencv_cv_connectedComponentsWithStats, METH_VARARGS | METH_KEYWORDS, "connectedComponentsWithStats(image[, labels[, stats[, centroids[, connectivity[, ltype]]]]]) -> retval, labels, stats, centroids"},
    {"contourArea", (PyCFunction)pyopencv_cv_contourArea, METH_VARARGS | METH_KEYWORDS, "contourArea(contour[, oriented]) -> retval"},
    {"convertMaps", (PyCFunction)pyopencv_cv_convertMaps, METH_VARARGS | METH_KEYWORDS, "convertMaps(map1, map2, dstmap1type[, dstmap1[, dstmap2[, nninterpolation]]]) -> dstmap1, dstmap2"},
    {"convertPointsFromHomogeneous", (PyCFunction)pyopencv_cv_convertPointsFromHomogeneous, METH_VARARGS | METH_KEYWORDS, "convertPointsFromHomogeneous(src[, dst]) -> dst"},
    {"convertPointsToHomogeneous", (PyCFunction)pyopencv_cv_convertPointsToHomogeneous, METH_VARARGS | METH_KEYWORDS, "convertPointsToHomogeneous(src[, dst]) -> dst"},
    {"convertScaleAbs", (PyCFunction)pyopencv_cv_convertScaleAbs, METH_VARARGS | METH_KEYWORDS, "convertScaleAbs(src[, dst[, alpha[, beta]]]) -> dst"},
    {"convexHull", (PyCFunction)pyopencv_cv_convexHull, METH_VARARGS | METH_KEYWORDS, "convexHull(points[, hull[, clockwise[, returnPoints]]]) -> hull"},
    {"convexityDefects", (PyCFunction)pyopencv_cv_convexityDefects, METH_VARARGS | METH_KEYWORDS, "convexityDefects(contour, convexhull[, convexityDefects]) -> convexityDefects"},
    {"copyMakeBorder", (PyCFunction)pyopencv_cv_copyMakeBorder, METH_VARARGS | METH_KEYWORDS, "copyMakeBorder(src, top, bottom, left, right, borderType[, dst[, value]]) -> dst"},
    {"cornerEigenValsAndVecs", (PyCFunction)pyopencv_cv_cornerEigenValsAndVecs, METH_VARARGS | METH_KEYWORDS, "cornerEigenValsAndVecs(src, blockSize, ksize[, dst[, borderType]]) -> dst"},
    {"cornerHarris", (PyCFunction)pyopencv_cv_cornerHarris, METH_VARARGS | METH_KEYWORDS, "cornerHarris(src, blockSize, ksize, k[, dst[, borderType]]) -> dst"},
    {"cornerMinEigenVal", (PyCFunction)pyopencv_cv_cornerMinEigenVal, METH_VARARGS | METH_KEYWORDS, "cornerMinEigenVal(src, blockSize[, dst[, ksize[, borderType]]]) -> dst"},
    {"cornerSubPix", (PyCFunction)pyopencv_cv_cornerSubPix, METH_VARARGS | METH_KEYWORDS, "cornerSubPix(image, corners, winSize, zeroZone, criteria) -> corners"},
    {"correctMatches", (PyCFunction)pyopencv_cv_correctMatches, METH_VARARGS | METH_KEYWORDS, "correctMatches(F, points1, points2[, newPoints1[, newPoints2]]) -> newPoints1, newPoints2"},
    {"countNonZero", (PyCFunction)pyopencv_cv_countNonZero, METH_VARARGS | METH_KEYWORDS, "countNonZero(src) -> retval"},
    {"createAffineTransformer", (PyCFunction)pyopencv_cv_createAffineTransformer, METH_VARARGS | METH_KEYWORDS, "createAffineTransformer(fullAffine) -> retval"},
    {"createAlignMTB", (PyCFunction)pyopencv_cv_createAlignMTB, METH_VARARGS | METH_KEYWORDS, "createAlignMTB([, max_bits[, exclude_range[, cut]]]) -> retval"},
    {"createBackgroundSubtractorKNN", (PyCFunction)pyopencv_cv_createBackgroundSubtractorKNN, METH_VARARGS | METH_KEYWORDS, "createBackgroundSubtractorKNN([, history[, dist2Threshold[, detectShadows]]]) -> retval"},
    {"createBackgroundSubtractorMOG2", (PyCFunction)pyopencv_cv_createBackgroundSubtractorMOG2, METH_VARARGS | METH_KEYWORDS, "createBackgroundSubtractorMOG2([, history[, varThreshold[, detectShadows]]]) -> retval"},
    {"createCLAHE", (PyCFunction)pyopencv_cv_createCLAHE, METH_VARARGS | METH_KEYWORDS, "createCLAHE([, clipLimit[, tileGridSize]]) -> retval"},
    {"createCalibrateDebevec", (PyCFunction)pyopencv_cv_createCalibrateDebevec, METH_VARARGS | METH_KEYWORDS, "createCalibrateDebevec([, samples[, lambda[, random]]]) -> retval"},
    {"createCalibrateRobertson", (PyCFunction)pyopencv_cv_createCalibrateRobertson, METH_VARARGS | METH_KEYWORDS, "createCalibrateRobertson([, max_iter[, threshold]]) -> retval"},
    {"createChiHistogramCostExtractor", (PyCFunction)pyopencv_cv_createChiHistogramCostExtractor, METH_VARARGS | METH_KEYWORDS, "createChiHistogramCostExtractor([, nDummies[, defaultCost]]) -> retval"},
    {"createEMDHistogramCostExtractor", (PyCFunction)pyopencv_cv_createEMDHistogramCostExtractor, METH_VARARGS | METH_KEYWORDS, "createEMDHistogramCostExtractor([, flag[, nDummies[, defaultCost]]]) -> retval"},
    {"createEMDL1HistogramCostExtractor", (PyCFunction)pyopencv_cv_createEMDL1HistogramCostExtractor, METH_VARARGS | METH_KEYWORDS, "createEMDL1HistogramCostExtractor([, nDummies[, defaultCost]]) -> retval"},
    {"createHanningWindow", (PyCFunction)pyopencv_cv_createHanningWindow, METH_VARARGS | METH_KEYWORDS, "createHanningWindow(winSize, type[, dst]) -> dst"},
    {"createHausdorffDistanceExtractor", (PyCFunction)pyopencv_cv_createHausdorffDistanceExtractor, METH_VARARGS | METH_KEYWORDS, "createHausdorffDistanceExtractor([, distanceFlag[, rankProp]]) -> retval"},
    {"createLineSegmentDetector", (PyCFunction)pyopencv_cv_createLineSegmentDetector, METH_VARARGS | METH_KEYWORDS, "createLineSegmentDetector([, _refine[, _scale[, _sigma_scale[, _quant[, _ang_th[, _log_eps[, _density_th[, _n_bins]]]]]]]]) -> retval"},
    {"createMergeDebevec", (PyCFunction)pyopencv_cv_createMergeDebevec, METH_VARARGS | METH_KEYWORDS, "createMergeDebevec() -> retval"},
    {"createMergeMertens", (PyCFunction)pyopencv_cv_createMergeMertens, METH_VARARGS | METH_KEYWORDS, "createMergeMertens([, contrast_weight[, saturation_weight[, exposure_weight]]]) -> retval"},
    {"createMergeRobertson", (PyCFunction)pyopencv_cv_createMergeRobertson, METH_VARARGS | METH_KEYWORDS, "createMergeRobertson() -> retval"},
    {"createNormHistogramCostExtractor", (PyCFunction)pyopencv_cv_createNormHistogramCostExtractor, METH_VARARGS | METH_KEYWORDS, "createNormHistogramCostExtractor([, flag[, nDummies[, defaultCost]]]) -> retval"},
    {"createOptFlow_DualTVL1", (PyCFunction)pyopencv_cv_createOptFlow_DualTVL1, METH_VARARGS | METH_KEYWORDS, "createOptFlow_DualTVL1() -> retval"},
    {"createShapeContextDistanceExtractor", (PyCFunction)pyopencv_cv_createShapeContextDistanceExtractor, METH_VARARGS | METH_KEYWORDS, "createShapeContextDistanceExtractor([, nAngularBins[, nRadialBins[, innerRadius[, outerRadius[, iterations[, comparer[, transformer]]]]]]]) -> retval"},
    {"createStitcher", (PyCFunction)pyopencv_cv_createStitcher, METH_VARARGS | METH_KEYWORDS, "createStitcher([, try_use_gpu]) -> retval"},
    {"createThinPlateSplineShapeTransformer", (PyCFunction)pyopencv_cv_createThinPlateSplineShapeTransformer, METH_VARARGS | METH_KEYWORDS, "createThinPlateSplineShapeTransformer([, regularizationParameter]) -> retval"},
    {"createTonemap", (PyCFunction)pyopencv_cv_createTonemap, METH_VARARGS | METH_KEYWORDS, "createTonemap([, gamma]) -> retval"},
    {"createTonemapDrago", (PyCFunction)pyopencv_cv_createTonemapDrago, METH_VARARGS | METH_KEYWORDS, "createTonemapDrago([, gamma[, saturation[, bias]]]) -> retval"},
    {"createTonemapDurand", (PyCFunction)pyopencv_cv_createTonemapDurand, METH_VARARGS | METH_KEYWORDS, "createTonemapDurand([, gamma[, contrast[, saturation[, sigma_space[, sigma_color]]]]]) -> retval"},
    {"createTonemapMantiuk", (PyCFunction)pyopencv_cv_createTonemapMantiuk, METH_VARARGS | METH_KEYWORDS, "createTonemapMantiuk([, gamma[, scale[, saturation]]]) -> retval"},
    {"createTonemapReinhard", (PyCFunction)pyopencv_cv_createTonemapReinhard, METH_VARARGS | METH_KEYWORDS, "createTonemapReinhard([, gamma[, intensity[, light_adapt[, color_adapt]]]]) -> retval"},
    {"cubeRoot", (PyCFunction)pyopencv_cv_cubeRoot, METH_VARARGS | METH_KEYWORDS, "cubeRoot(val) -> retval"},
    {"cvtColor", (PyCFunction)pyopencv_cv_cvtColor, METH_VARARGS | METH_KEYWORDS, "cvtColor(src, code[, dst[, dstCn]]) -> dst"},
    {"dct", (PyCFunction)pyopencv_cv_dct, METH_VARARGS | METH_KEYWORDS, "dct(src[, dst[, flags]]) -> dst"},
    {"decolor", (PyCFunction)pyopencv_cv_decolor, METH_VARARGS | METH_KEYWORDS, "decolor(src[, grayscale[, color_boost]]) -> grayscale, color_boost"},
    {"decomposeEssentialMat", (PyCFunction)pyopencv_cv_decomposeEssentialMat, METH_VARARGS | METH_KEYWORDS, "decomposeEssentialMat(E[, R1[, R2[, t]]]) -> R1, R2, t"},
    {"decomposeHomographyMat", (PyCFunction)pyopencv_cv_decomposeHomographyMat, METH_VARARGS | METH_KEYWORDS, "decomposeHomographyMat(H, K[, rotations[, translations[, normals]]]) -> retval, rotations, translations, normals"},
    {"decomposeProjectionMatrix", (PyCFunction)pyopencv_cv_decomposeProjectionMatrix, METH_VARARGS | METH_KEYWORDS, "decomposeProjectionMatrix(projMatrix[, cameraMatrix[, rotMatrix[, transVect[, rotMatrixX[, rotMatrixY[, rotMatrixZ[, eulerAngles]]]]]]]) -> cameraMatrix, rotMatrix, transVect, rotMatrixX, rotMatrixY, rotMatrixZ, eulerAngles"},
    {"demosaicing", (PyCFunction)pyopencv_cv_demosaicing, METH_VARARGS | METH_KEYWORDS, "demosaicing(_src, code[, _dst[, dcn]]) -> _dst"},
    {"denoise_TVL1", (PyCFunction)pyopencv_cv_denoise_TVL1, METH_VARARGS | METH_KEYWORDS, "denoise_TVL1(observations, result[, lambda[, niters]]) -> None"},
    {"destroyAllWindows", (PyCFunction)pyopencv_cv_destroyAllWindows, METH_VARARGS | METH_KEYWORDS, "destroyAllWindows() -> None"},
    {"destroyWindow", (PyCFunction)pyopencv_cv_destroyWindow, METH_VARARGS | METH_KEYWORDS, "destroyWindow(winname) -> None"},
    {"detailEnhance", (PyCFunction)pyopencv_cv_detailEnhance, METH_VARARGS | METH_KEYWORDS, "detailEnhance(src[, dst[, sigma_s[, sigma_r]]]) -> dst"},
    {"determinant", (PyCFunction)pyopencv_cv_determinant, METH_VARARGS | METH_KEYWORDS, "determinant(mtx) -> retval"},
    {"dft", (PyCFunction)pyopencv_cv_dft, METH_VARARGS | METH_KEYWORDS, "dft(src[, dst[, flags[, nonzeroRows]]]) -> dst"},
    {"dilate", (PyCFunction)pyopencv_cv_dilate, METH_VARARGS | METH_KEYWORDS, "dilate(src, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]) -> dst"},
    {"distanceTransform", (PyCFunction)pyopencv_cv_distanceTransform, METH_VARARGS | METH_KEYWORDS, "distanceTransform(src, distanceType, maskSize[, dst[, dstType]]) -> dst"},
    {"distanceTransformWithLabels", (PyCFunction)pyopencv_cv_distanceTransformWithLabels, METH_VARARGS | METH_KEYWORDS, "distanceTransformWithLabels(src, distanceType, maskSize[, dst[, labels[, labelType]]]) -> dst, labels"},
    {"divide", (PyCFunction)pyopencv_cv_divide, METH_VARARGS | METH_KEYWORDS, "divide(src1, src2[, dst[, scale[, dtype]]]) -> dst  or  divide(scale, src2[, dst[, dtype]]) -> dst"},
    {"drawChessboardCorners", (PyCFunction)pyopencv_cv_drawChessboardCorners, METH_VARARGS | METH_KEYWORDS, "drawChessboardCorners(image, patternSize, corners, patternWasFound) -> image"},
    {"drawContours", (PyCFunction)pyopencv_cv_drawContours, METH_VARARGS | METH_KEYWORDS, "drawContours(image, contours, contourIdx, color[, thickness[, lineType[, hierarchy[, maxLevel[, offset]]]]]) -> image"},
    {"drawKeypoints", (PyCFunction)pyopencv_cv_drawKeypoints, METH_VARARGS | METH_KEYWORDS, "drawKeypoints(image, keypoints, outImage[, color[, flags]]) -> outImage"},
    {"drawMatches", (PyCFunction)pyopencv_cv_drawMatches, METH_VARARGS | METH_KEYWORDS, "drawMatches(img1, keypoints1, img2, keypoints2, matches1to2, outImg[, matchColor[, singlePointColor[, matchesMask[, flags]]]]) -> outImg"},
    {"drawMatchesKnn", (PyCFunction)pyopencv_cv_drawMatchesKnn, METH_VARARGS | METH_KEYWORDS, "drawMatchesKnn(img1, keypoints1, img2, keypoints2, matches1to2, outImg[, matchColor[, singlePointColor[, matchesMask[, flags]]]]) -> outImg"},
    {"edgePreservingFilter", (PyCFunction)pyopencv_cv_edgePreservingFilter, METH_VARARGS | METH_KEYWORDS, "edgePreservingFilter(src[, dst[, flags[, sigma_s[, sigma_r]]]]) -> dst"},
    {"eigen", (PyCFunction)pyopencv_cv_eigen, METH_VARARGS | METH_KEYWORDS, "eigen(src[, eigenvalues[, eigenvectors]]) -> retval, eigenvalues, eigenvectors"},
    {"ellipse", (PyCFunction)pyopencv_cv_ellipse, METH_VARARGS | METH_KEYWORDS, "ellipse(img, center, axes, angle, startAngle, endAngle, color[, thickness[, lineType[, shift]]]) -> img  or  ellipse(img, box, color[, thickness[, lineType]]) -> img"},
    {"ellipse2Poly", (PyCFunction)pyopencv_cv_ellipse2Poly, METH_VARARGS | METH_KEYWORDS, "ellipse2Poly(center, axes, angle, arcStart, arcEnd, delta) -> pts"},
    {"equalizeHist", (PyCFunction)pyopencv_cv_equalizeHist, METH_VARARGS | METH_KEYWORDS, "equalizeHist(src[, dst]) -> dst"},
    {"erode", (PyCFunction)pyopencv_cv_erode, METH_VARARGS | METH_KEYWORDS, "erode(src, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]) -> dst"},
    {"estimateAffine3D", (PyCFunction)pyopencv_cv_estimateAffine3D, METH_VARARGS | METH_KEYWORDS, "estimateAffine3D(src, dst[, out[, inliers[, ransacThreshold[, confidence]]]]) -> retval, out, inliers"},
    {"estimateRigidTransform", (PyCFunction)pyopencv_cv_estimateRigidTransform, METH_VARARGS | METH_KEYWORDS, "estimateRigidTransform(src, dst, fullAffine) -> retval"},
    {"exp", (PyCFunction)pyopencv_cv_exp, METH_VARARGS | METH_KEYWORDS, "exp(src[, dst]) -> dst"},
    {"extractChannel", (PyCFunction)pyopencv_cv_extractChannel, METH_VARARGS | METH_KEYWORDS, "extractChannel(src, coi[, dst]) -> dst"},
    {"fastAtan2", (PyCFunction)pyopencv_cv_fastAtan2, METH_VARARGS | METH_KEYWORDS, "fastAtan2(y, x) -> retval"},
    {"fastNlMeansDenoising", (PyCFunction)pyopencv_cv_fastNlMeansDenoising, METH_VARARGS | METH_KEYWORDS, "fastNlMeansDenoising(src[, dst[, h[, templateWindowSize[, searchWindowSize]]]]) -> dst  or  fastNlMeansDenoising(src, h[, dst[, templateWindowSize[, searchWindowSize[, normType]]]]) -> dst"},
    {"fastNlMeansDenoisingColored", (PyCFunction)pyopencv_cv_fastNlMeansDenoisingColored, METH_VARARGS | METH_KEYWORDS, "fastNlMeansDenoisingColored(src[, dst[, h[, hColor[, templateWindowSize[, searchWindowSize]]]]]) -> dst"},
    {"fastNlMeansDenoisingColoredMulti", (PyCFunction)pyopencv_cv_fastNlMeansDenoisingColoredMulti, METH_VARARGS | METH_KEYWORDS, "fastNlMeansDenoisingColoredMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize[, dst[, h[, hColor[, templateWindowSize[, searchWindowSize]]]]]) -> dst"},
    {"fastNlMeansDenoisingMulti", (PyCFunction)pyopencv_cv_fastNlMeansDenoisingMulti, METH_VARARGS | METH_KEYWORDS, "fastNlMeansDenoisingMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize[, dst[, h[, templateWindowSize[, searchWindowSize]]]]) -> dst  or  fastNlMeansDenoisingMulti(srcImgs, imgToDenoiseIndex, temporalWindowSize, h[, dst[, templateWindowSize[, searchWindowSize[, normType]]]]) -> dst"},
    {"fillConvexPoly", (PyCFunction)pyopencv_cv_fillConvexPoly, METH_VARARGS | METH_KEYWORDS, "fillConvexPoly(img, points, color[, lineType[, shift]]) -> img"},
    {"fillPoly", (PyCFunction)pyopencv_cv_fillPoly, METH_VARARGS | METH_KEYWORDS, "fillPoly(img, pts, color[, lineType[, shift[, offset]]]) -> img"},
    {"filter2D", (PyCFunction)pyopencv_cv_filter2D, METH_VARARGS | METH_KEYWORDS, "filter2D(src, ddepth, kernel[, dst[, anchor[, delta[, borderType]]]]) -> dst"},
    {"filterSpeckles", (PyCFunction)pyopencv_cv_filterSpeckles, METH_VARARGS | METH_KEYWORDS, "filterSpeckles(img, newVal, maxSpeckleSize, maxDiff[, buf]) -> img, buf"},
    {"findChessboardCorners", (PyCFunction)pyopencv_cv_findChessboardCorners, METH_VARARGS | METH_KEYWORDS, "findChessboardCorners(image, patternSize[, corners[, flags]]) -> retval, corners"},
    {"findCirclesGrid", (PyCFunction)pyopencv_cv_findCirclesGrid, METH_VARARGS | METH_KEYWORDS, "findCirclesGrid(image, patternSize[, centers[, flags[, blobDetector]]]) -> retval, centers"},
    {"findContours", (PyCFunction)pyopencv_cv_findContours, METH_VARARGS | METH_KEYWORDS, "findContours(image, mode, method[, contours[, hierarchy[, offset]]]) -> image, contours, hierarchy"},
    {"findEssentialMat", (PyCFunction)pyopencv_cv_findEssentialMat, METH_VARARGS | METH_KEYWORDS, "findEssentialMat(points1, points2[, focal[, pp[, method[, prob[, threshold[, mask]]]]]]) -> retval, mask"},
    {"findFundamentalMat", (PyCFunction)pyopencv_cv_findFundamentalMat, METH_VARARGS | METH_KEYWORDS, "findFundamentalMat(points1, points2[, method[, param1[, param2[, mask]]]]) -> retval, mask"},
    {"findHomography", (PyCFunction)pyopencv_cv_findHomography, METH_VARARGS | METH_KEYWORDS, "findHomography(srcPoints, dstPoints[, method[, ransacReprojThreshold[, mask[, maxIters[, confidence]]]]]) -> retval, mask"},
    {"findNonZero", (PyCFunction)pyopencv_cv_findNonZero, METH_VARARGS | METH_KEYWORDS, "findNonZero(src[, idx]) -> idx"},
    {"findTransformECC", (PyCFunction)pyopencv_cv_findTransformECC, METH_VARARGS | METH_KEYWORDS, "findTransformECC(templateImage, inputImage, warpMatrix[, motionType[, criteria[, inputMask]]]) -> retval, warpMatrix"},
    {"fitEllipse", (PyCFunction)pyopencv_cv_fitEllipse, METH_VARARGS | METH_KEYWORDS, "fitEllipse(points) -> retval"},
    {"fitLine", (PyCFunction)pyopencv_cv_fitLine, METH_VARARGS | METH_KEYWORDS, "fitLine(points, distType, param, reps, aeps[, line]) -> line"},
    {"flip", (PyCFunction)pyopencv_cv_flip, METH_VARARGS | METH_KEYWORDS, "flip(src, flipCode[, dst]) -> dst"},
    {"floodFill", (PyCFunction)pyopencv_cv_floodFill, METH_VARARGS | METH_KEYWORDS, "floodFill(image, mask, seedPoint, newVal[, loDiff[, upDiff[, flags]]]) -> retval, image, mask, rect"},
    {"gemm", (PyCFunction)pyopencv_cv_gemm, METH_VARARGS | METH_KEYWORDS, "gemm(src1, src2, alpha, src3, beta[, dst[, flags]]) -> dst"},
    {"getAffineTransform", (PyCFunction)pyopencv_cv_getAffineTransform, METH_VARARGS | METH_KEYWORDS, "getAffineTransform(src, dst) -> retval"},
    {"getBuildInformation", (PyCFunction)pyopencv_cv_getBuildInformation, METH_VARARGS | METH_KEYWORDS, "getBuildInformation() -> retval"},
    {"getCPUTickCount", (PyCFunction)pyopencv_cv_getCPUTickCount, METH_VARARGS | METH_KEYWORDS, "getCPUTickCount() -> retval"},
    {"getDefaultNewCameraMatrix", (PyCFunction)pyopencv_cv_getDefaultNewCameraMatrix, METH_VARARGS | METH_KEYWORDS, "getDefaultNewCameraMatrix(cameraMatrix[, imgsize[, centerPrincipalPoint]]) -> retval"},
    {"getDerivKernels", (PyCFunction)pyopencv_cv_getDerivKernels, METH_VARARGS | METH_KEYWORDS, "getDerivKernels(dx, dy, ksize[, kx[, ky[, normalize[, ktype]]]]) -> kx, ky"},
    {"getGaborKernel", (PyCFunction)pyopencv_cv_getGaborKernel, METH_VARARGS | METH_KEYWORDS, "getGaborKernel(ksize, sigma, theta, lambd, gamma[, psi[, ktype]]) -> retval"},
    {"getGaussianKernel", (PyCFunction)pyopencv_cv_getGaussianKernel, METH_VARARGS | METH_KEYWORDS, "getGaussianKernel(ksize, sigma[, ktype]) -> retval"},
    {"getNumberOfCPUs", (PyCFunction)pyopencv_cv_getNumberOfCPUs, METH_VARARGS | METH_KEYWORDS, "getNumberOfCPUs() -> retval"},
    {"getOptimalDFTSize", (PyCFunction)pyopencv_cv_getOptimalDFTSize, METH_VARARGS | METH_KEYWORDS, "getOptimalDFTSize(vecsize) -> retval"},
    {"getOptimalNewCameraMatrix", (PyCFunction)pyopencv_cv_getOptimalNewCameraMatrix, METH_VARARGS | METH_KEYWORDS, "getOptimalNewCameraMatrix(cameraMatrix, distCoeffs, imageSize, alpha[, newImgSize[, centerPrincipalPoint]]) -> retval, validPixROI"},
    {"getPerspectiveTransform", (PyCFunction)pyopencv_cv_getPerspectiveTransform, METH_VARARGS | METH_KEYWORDS, "getPerspectiveTransform(src, dst) -> retval"},
    {"getRectSubPix", (PyCFunction)pyopencv_cv_getRectSubPix, METH_VARARGS | METH_KEYWORDS, "getRectSubPix(image, patchSize, center[, patch[, patchType]]) -> patch"},
    {"getRotationMatrix2D", (PyCFunction)pyopencv_cv_getRotationMatrix2D, METH_VARARGS | METH_KEYWORDS, "getRotationMatrix2D(center, angle, scale) -> retval"},
    {"getStructuringElement", (PyCFunction)pyopencv_cv_getStructuringElement, METH_VARARGS | METH_KEYWORDS, "getStructuringElement(shape, ksize[, anchor]) -> retval"},
    {"getTextSize", (PyCFunction)pyopencv_cv_getTextSize, METH_VARARGS | METH_KEYWORDS, "getTextSize(text, fontFace, fontScale, thickness) -> retval, baseLine"},
    {"getTickCount", (PyCFunction)pyopencv_cv_getTickCount, METH_VARARGS | METH_KEYWORDS, "getTickCount() -> retval"},
    {"getTickFrequency", (PyCFunction)pyopencv_cv_getTickFrequency, METH_VARARGS | METH_KEYWORDS, "getTickFrequency() -> retval"},
    {"getTrackbarPos", (PyCFunction)pyopencv_cv_getTrackbarPos, METH_VARARGS | METH_KEYWORDS, "getTrackbarPos(trackbarname, winname) -> retval"},
    {"getValidDisparityROI", (PyCFunction)pyopencv_cv_getValidDisparityROI, METH_VARARGS | METH_KEYWORDS, "getValidDisparityROI(roi1, roi2, minDisparity, numberOfDisparities, SADWindowSize) -> retval"},
    {"getWindowProperty", (PyCFunction)pyopencv_cv_getWindowProperty, METH_VARARGS | METH_KEYWORDS, "getWindowProperty(winname, prop_id) -> retval"},
    {"goodFeaturesToTrack", (PyCFunction)pyopencv_cv_goodFeaturesToTrack, METH_VARARGS | METH_KEYWORDS, "goodFeaturesToTrack(image, maxCorners, qualityLevel, minDistance[, corners[, mask[, blockSize[, useHarrisDetector[, k]]]]]) -> corners"},
    {"grabCut", (PyCFunction)pyopencv_cv_grabCut, METH_VARARGS | METH_KEYWORDS, "grabCut(img, mask, rect, bgdModel, fgdModel, iterCount[, mode]) -> mask, bgdModel, fgdModel"},
    {"groupRectangles", (PyCFunction)pyopencv_cv_groupRectangles, METH_VARARGS | METH_KEYWORDS, "groupRectangles(rectList, groupThreshold[, eps]) -> rectList, weights"},
    {"hconcat", (PyCFunction)pyopencv_cv_hconcat, METH_VARARGS | METH_KEYWORDS, "hconcat(src[, dst]) -> dst"},
    {"idct", (PyCFunction)pyopencv_cv_idct, METH_VARARGS | METH_KEYWORDS, "idct(src[, dst[, flags]]) -> dst"},
    {"idft", (PyCFunction)pyopencv_cv_idft, METH_VARARGS | METH_KEYWORDS, "idft(src[, dst[, flags[, nonzeroRows]]]) -> dst"},
    {"illuminationChange", (PyCFunction)pyopencv_cv_illuminationChange, METH_VARARGS | METH_KEYWORDS, "illuminationChange(src, mask[, dst[, alpha[, beta]]]) -> dst"},
    {"imdecode", (PyCFunction)pyopencv_cv_imdecode, METH_VARARGS | METH_KEYWORDS, "imdecode(buf, flags) -> retval"},
    {"imencode", (PyCFunction)pyopencv_cv_imencode, METH_VARARGS | METH_KEYWORDS, "imencode(ext, img[, params]) -> retval, buf"},
    {"imread", (PyCFunction)pyopencv_cv_imread, METH_VARARGS | METH_KEYWORDS, "imread(filename[, flags]) -> retval"},
    {"imreadmulti", (PyCFunction)pyopencv_cv_imreadmulti, METH_VARARGS | METH_KEYWORDS, "imreadmulti(filename, mats[, flags]) -> retval"},
    {"imshow", (PyCFunction)pyopencv_cv_imshow, METH_VARARGS | METH_KEYWORDS, "imshow(winname, mat) -> None"},
    {"imwrite", (PyCFunction)pyopencv_cv_imwrite, METH_VARARGS | METH_KEYWORDS, "imwrite(filename, img[, params]) -> retval"},
    {"inRange", (PyCFunction)pyopencv_cv_inRange, METH_VARARGS | METH_KEYWORDS, "inRange(src, lowerb, upperb[, dst]) -> dst"},
    {"initCameraMatrix2D", (PyCFunction)pyopencv_cv_initCameraMatrix2D, METH_VARARGS | METH_KEYWORDS, "initCameraMatrix2D(objectPoints, imagePoints, imageSize[, aspectRatio]) -> retval"},
    {"initUndistortRectifyMap", (PyCFunction)pyopencv_cv_initUndistortRectifyMap, METH_VARARGS | METH_KEYWORDS, "initUndistortRectifyMap(cameraMatrix, distCoeffs, R, newCameraMatrix, size, m1type[, map1[, map2]]) -> map1, map2"},
    {"initWideAngleProjMap", (PyCFunction)pyopencv_cv_initWideAngleProjMap, METH_VARARGS | METH_KEYWORDS, "initWideAngleProjMap(cameraMatrix, distCoeffs, imageSize, destImageWidth, m1type[, map1[, map2[, projType[, alpha]]]]) -> retval, map1, map2"},
    {"inpaint", (PyCFunction)pyopencv_cv_inpaint, METH_VARARGS | METH_KEYWORDS, "inpaint(src, inpaintMask, inpaintRadius, flags[, dst]) -> dst"},
    {"insertChannel", (PyCFunction)pyopencv_cv_insertChannel, METH_VARARGS | METH_KEYWORDS, "insertChannel(src, dst, coi) -> dst"},
    {"integral", (PyCFunction)pyopencv_cv_integral, METH_VARARGS | METH_KEYWORDS, "integral(src[, sum[, sdepth]]) -> sum"},
    {"integral2", (PyCFunction)pyopencv_cv_integral2, METH_VARARGS | METH_KEYWORDS, "integral2(src[, sum[, sqsum[, sdepth[, sqdepth]]]]) -> sum, sqsum"},
    {"integral3", (PyCFunction)pyopencv_cv_integral3, METH_VARARGS | METH_KEYWORDS, "integral3(src[, sum[, sqsum[, tilted[, sdepth[, sqdepth]]]]]) -> sum, sqsum, tilted"},
    {"intersectConvexConvex", (PyCFunction)pyopencv_cv_intersectConvexConvex, METH_VARARGS | METH_KEYWORDS, "intersectConvexConvex(_p1, _p2[, _p12[, handleNested]]) -> retval, _p12"},
    {"invert", (PyCFunction)pyopencv_cv_invert, METH_VARARGS | METH_KEYWORDS, "invert(src[, dst[, flags]]) -> retval, dst"},
    {"invertAffineTransform", (PyCFunction)pyopencv_cv_invertAffineTransform, METH_VARARGS | METH_KEYWORDS, "invertAffineTransform(M[, iM]) -> iM"},
    {"isContourConvex", (PyCFunction)pyopencv_cv_isContourConvex, METH_VARARGS | METH_KEYWORDS, "isContourConvex(contour) -> retval"},
    {"kmeans", (PyCFunction)pyopencv_cv_kmeans, METH_VARARGS | METH_KEYWORDS, "kmeans(data, K, bestLabels, criteria, attempts, flags[, centers]) -> retval, bestLabels, centers"},
    {"line", (PyCFunction)pyopencv_cv_line, METH_VARARGS | METH_KEYWORDS, "line(img, pt1, pt2, color[, thickness[, lineType[, shift]]]) -> img"},
    {"linearPolar", (PyCFunction)pyopencv_cv_linearPolar, METH_VARARGS | METH_KEYWORDS, "linearPolar(src, center, maxRadius, flags[, dst]) -> dst"},
    {"log", (PyCFunction)pyopencv_cv_log, METH_VARARGS | METH_KEYWORDS, "log(src[, dst]) -> dst"},
    {"logPolar", (PyCFunction)pyopencv_cv_logPolar, METH_VARARGS | METH_KEYWORDS, "logPolar(src, center, M, flags[, dst]) -> dst"},
    {"magnitude", (PyCFunction)pyopencv_cv_magnitude, METH_VARARGS | METH_KEYWORDS, "magnitude(x, y[, magnitude]) -> magnitude"},
    {"matMulDeriv", (PyCFunction)pyopencv_cv_matMulDeriv, METH_VARARGS | METH_KEYWORDS, "matMulDeriv(A, B[, dABdA[, dABdB]]) -> dABdA, dABdB"},
    {"matchShapes", (PyCFunction)pyopencv_cv_matchShapes, METH_VARARGS | METH_KEYWORDS, "matchShapes(contour1, contour2, method, parameter) -> retval"},
    {"matchTemplate", (PyCFunction)pyopencv_cv_matchTemplate, METH_VARARGS | METH_KEYWORDS, "matchTemplate(image, templ, method[, result[, mask]]) -> result"},
    {"max", (PyCFunction)pyopencv_cv_max, METH_VARARGS | METH_KEYWORDS, "max(src1, src2[, dst]) -> dst"},
    {"mean", (PyCFunction)pyopencv_cv_mean, METH_VARARGS | METH_KEYWORDS, "mean(src[, mask]) -> retval"},
    {"meanShift", (PyCFunction)pyopencv_cv_meanShift, METH_VARARGS | METH_KEYWORDS, "meanShift(probImage, window, criteria) -> retval, window"},
    {"meanStdDev", (PyCFunction)pyopencv_cv_meanStdDev, METH_VARARGS | METH_KEYWORDS, "meanStdDev(src[, mean[, stddev[, mask]]]) -> mean, stddev"},
    {"medianBlur", (PyCFunction)pyopencv_cv_medianBlur, METH_VARARGS | METH_KEYWORDS, "medianBlur(src, ksize[, dst]) -> dst"},
    {"merge", (PyCFunction)pyopencv_cv_merge, METH_VARARGS | METH_KEYWORDS, "merge(mv[, dst]) -> dst"},
    {"min", (PyCFunction)pyopencv_cv_min, METH_VARARGS | METH_KEYWORDS, "min(src1, src2[, dst]) -> dst"},
    {"minAreaRect", (PyCFunction)pyopencv_cv_minAreaRect, METH_VARARGS | METH_KEYWORDS, "minAreaRect(points) -> retval"},
    {"minEnclosingCircle", (PyCFunction)pyopencv_cv_minEnclosingCircle, METH_VARARGS | METH_KEYWORDS, "minEnclosingCircle(points) -> center, radius"},
    {"minEnclosingTriangle", (PyCFunction)pyopencv_cv_minEnclosingTriangle, METH_VARARGS | METH_KEYWORDS, "minEnclosingTriangle(points[, triangle]) -> retval, triangle"},
    {"minMaxLoc", (PyCFunction)pyopencv_cv_minMaxLoc, METH_VARARGS | METH_KEYWORDS, "minMaxLoc(src[, mask]) -> minVal, maxVal, minLoc, maxLoc"},
    {"mixChannels", (PyCFunction)pyopencv_cv_mixChannels, METH_VARARGS | METH_KEYWORDS, "mixChannels(src, dst, fromTo) -> dst"},
    {"moments", (PyCFunction)pyopencv_cv_moments, METH_VARARGS | METH_KEYWORDS, "moments(array[, binaryImage]) -> retval"},
    {"morphologyEx", (PyCFunction)pyopencv_cv_morphologyEx, METH_VARARGS | METH_KEYWORDS, "morphologyEx(src, op, kernel[, dst[, anchor[, iterations[, borderType[, borderValue]]]]]) -> dst"},
    {"moveWindow", (PyCFunction)pyopencv_cv_moveWindow, METH_VARARGS | METH_KEYWORDS, "moveWindow(winname, x, y) -> None"},
    {"mulSpectrums", (PyCFunction)pyopencv_cv_mulSpectrums, METH_VARARGS | METH_KEYWORDS, "mulSpectrums(a, b, flags[, c[, conjB]]) -> c"},
    {"mulTransposed", (PyCFunction)pyopencv_cv_mulTransposed, METH_VARARGS | METH_KEYWORDS, "mulTransposed(src, aTa[, dst[, delta[, scale[, dtype]]]]) -> dst"},
    {"multiply", (PyCFunction)pyopencv_cv_multiply, METH_VARARGS | METH_KEYWORDS, "multiply(src1, src2[, dst[, scale[, dtype]]]) -> dst"},
    {"namedWindow", (PyCFunction)pyopencv_cv_namedWindow, METH_VARARGS | METH_KEYWORDS, "namedWindow(winname[, flags]) -> None"},
    {"norm", (PyCFunction)pyopencv_cv_norm, METH_VARARGS | METH_KEYWORDS, "norm(src1[, normType[, mask]]) -> retval  or  norm(src1, src2[, normType[, mask]]) -> retval"},
    {"normalize", (PyCFunction)pyopencv_cv_normalize, METH_VARARGS | METH_KEYWORDS, "normalize(src, dst[, alpha[, beta[, norm_type[, dtype[, mask]]]]]) -> dst"},
    {"patchNaNs", (PyCFunction)pyopencv_cv_patchNaNs, METH_VARARGS | METH_KEYWORDS, "patchNaNs(a[, val]) -> a"},
    {"pencilSketch", (PyCFunction)pyopencv_cv_pencilSketch, METH_VARARGS | METH_KEYWORDS, "pencilSketch(src[, dst1[, dst2[, sigma_s[, sigma_r[, shade_factor]]]]]) -> dst1, dst2"},
    {"perspectiveTransform", (PyCFunction)pyopencv_cv_perspectiveTransform, METH_VARARGS | METH_KEYWORDS, "perspectiveTransform(src, m[, dst]) -> dst"},
    {"phase", (PyCFunction)pyopencv_cv_phase, METH_VARARGS | METH_KEYWORDS, "phase(x, y[, angle[, angleInDegrees]]) -> angle"},
    {"phaseCorrelate", (PyCFunction)pyopencv_cv_phaseCorrelate, METH_VARARGS | METH_KEYWORDS, "phaseCorrelate(src1, src2[, window]) -> retval, response"},
    {"pointPolygonTest", (PyCFunction)pyopencv_cv_pointPolygonTest, METH_VARARGS | METH_KEYWORDS, "pointPolygonTest(contour, pt, measureDist) -> retval"},
    {"polarToCart", (PyCFunction)pyopencv_cv_polarToCart, METH_VARARGS | METH_KEYWORDS, "polarToCart(magnitude, angle[, x[, y[, angleInDegrees]]]) -> x, y"},
    {"polylines", (PyCFunction)pyopencv_cv_polylines, METH_VARARGS | METH_KEYWORDS, "polylines(img, pts, isClosed, color[, thickness[, lineType[, shift]]]) -> img"},
    {"pow", (PyCFunction)pyopencv_cv_pow, METH_VARARGS | METH_KEYWORDS, "pow(src, power[, dst]) -> dst"},
    {"preCornerDetect", (PyCFunction)pyopencv_cv_preCornerDetect, METH_VARARGS | METH_KEYWORDS, "preCornerDetect(src, ksize[, dst[, borderType]]) -> dst"},
    {"projectPoints", (PyCFunction)pyopencv_cv_projectPoints, METH_VARARGS | METH_KEYWORDS, "projectPoints(objectPoints, rvec, tvec, cameraMatrix, distCoeffs[, imagePoints[, jacobian[, aspectRatio]]]) -> imagePoints, jacobian"},
    {"putText", (PyCFunction)pyopencv_cv_putText, METH_VARARGS | METH_KEYWORDS, "putText(img, text, org, fontFace, fontScale, color[, thickness[, lineType[, bottomLeftOrigin]]]) -> img"},
    {"pyrDown", (PyCFunction)pyopencv_cv_pyrDown, METH_VARARGS | METH_KEYWORDS, "pyrDown(src[, dst[, dstsize[, borderType]]]) -> dst"},
    {"pyrMeanShiftFiltering", (PyCFunction)pyopencv_cv_pyrMeanShiftFiltering, METH_VARARGS | METH_KEYWORDS, "pyrMeanShiftFiltering(src, sp, sr[, dst[, maxLevel[, termcrit]]]) -> dst"},
    {"pyrUp", (PyCFunction)pyopencv_cv_pyrUp, METH_VARARGS | METH_KEYWORDS, "pyrUp(src[, dst[, dstsize[, borderType]]]) -> dst"},
    {"randShuffle", (PyCFunction)pyopencv_cv_randShuffle, METH_VARARGS | METH_KEYWORDS, "randShuffle(dst[, iterFactor]) -> dst"},
    {"randn", (PyCFunction)pyopencv_cv_randn, METH_VARARGS | METH_KEYWORDS, "randn(dst, mean, stddev) -> dst"},
    {"randu", (PyCFunction)pyopencv_cv_randu, METH_VARARGS | METH_KEYWORDS, "randu(dst, low, high) -> dst"},
    {"recoverPose", (PyCFunction)pyopencv_cv_recoverPose, METH_VARARGS | METH_KEYWORDS, "recoverPose(E, points1, points2[, R[, t[, focal[, pp[, mask]]]]]) -> retval, R, t, mask"},
    {"rectangle", (PyCFunction)pyopencv_cv_rectangle, METH_VARARGS | METH_KEYWORDS, "rectangle(img, pt1, pt2, color[, thickness[, lineType[, shift]]]) -> img"},
    {"rectify3Collinear", (PyCFunction)pyopencv_cv_rectify3Collinear, METH_VARARGS | METH_KEYWORDS, "rectify3Collinear(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, cameraMatrix3, distCoeffs3, imgpt1, imgpt3, imageSize, R12, T12, R13, T13, alpha, newImgSize, flags[, R1[, R2[, R3[, P1[, P2[, P3[, Q]]]]]]]) -> retval, R1, R2, R3, P1, P2, P3, Q, roi1, roi2"},
    {"reduce", (PyCFunction)pyopencv_cv_reduce, METH_VARARGS | METH_KEYWORDS, "reduce(src, dim, rtype[, dst[, dtype]]) -> dst"},
    {"remap", (PyCFunction)pyopencv_cv_remap, METH_VARARGS | METH_KEYWORDS, "remap(src, map1, map2, interpolation[, dst[, borderMode[, borderValue]]]) -> dst"},
    {"repeat", (PyCFunction)pyopencv_cv_repeat, METH_VARARGS | METH_KEYWORDS, "repeat(src, ny, nx[, dst]) -> dst"},
    {"reprojectImageTo3D", (PyCFunction)pyopencv_cv_reprojectImageTo3D, METH_VARARGS | METH_KEYWORDS, "reprojectImageTo3D(disparity, Q[, _3dImage[, handleMissingValues[, ddepth]]]) -> _3dImage"},
    {"resize", (PyCFunction)pyopencv_cv_resize, METH_VARARGS | METH_KEYWORDS, "resize(src, dsize[, dst[, fx[, fy[, interpolation]]]]) -> dst"},
    {"resizeWindow", (PyCFunction)pyopencv_cv_resizeWindow, METH_VARARGS | METH_KEYWORDS, "resizeWindow(winname, width, height) -> None"},
    {"rotatedRectangleIntersection", (PyCFunction)pyopencv_cv_rotatedRectangleIntersection, METH_VARARGS | METH_KEYWORDS, "rotatedRectangleIntersection(rect1, rect2[, intersectingRegion]) -> retval, intersectingRegion"},
    {"scaleAdd", (PyCFunction)pyopencv_cv_scaleAdd, METH_VARARGS | METH_KEYWORDS, "scaleAdd(src1, alpha, src2[, dst]) -> dst"},
    {"seamlessClone", (PyCFunction)pyopencv_cv_seamlessClone, METH_VARARGS | METH_KEYWORDS, "seamlessClone(src, dst, mask, p, flags[, blend]) -> blend"},
    {"sepFilter2D", (PyCFunction)pyopencv_cv_sepFilter2D, METH_VARARGS | METH_KEYWORDS, "sepFilter2D(src, ddepth, kernelX, kernelY[, dst[, anchor[, delta[, borderType]]]]) -> dst"},
    {"setIdentity", (PyCFunction)pyopencv_cv_setIdentity, METH_VARARGS | METH_KEYWORDS, "setIdentity(mtx[, s]) -> mtx"},
    {"setTrackbarMax", (PyCFunction)pyopencv_cv_setTrackbarMax, METH_VARARGS | METH_KEYWORDS, "setTrackbarMax(trackbarname, winname, maxval) -> None"},
    {"setTrackbarPos", (PyCFunction)pyopencv_cv_setTrackbarPos, METH_VARARGS | METH_KEYWORDS, "setTrackbarPos(trackbarname, winname, pos) -> None"},
    {"setUseOptimized", (PyCFunction)pyopencv_cv_setUseOptimized, METH_VARARGS | METH_KEYWORDS, "setUseOptimized(onoff) -> None"},
    {"setWindowProperty", (PyCFunction)pyopencv_cv_setWindowProperty, METH_VARARGS | METH_KEYWORDS, "setWindowProperty(winname, prop_id, prop_value) -> None"},
    {"setWindowTitle", (PyCFunction)pyopencv_cv_setWindowTitle, METH_VARARGS | METH_KEYWORDS, "setWindowTitle(winname, title) -> None"},
    {"solve", (PyCFunction)pyopencv_cv_solve, METH_VARARGS | METH_KEYWORDS, "solve(src1, src2[, dst[, flags]]) -> retval, dst"},
    {"solveCubic", (PyCFunction)pyopencv_cv_solveCubic, METH_VARARGS | METH_KEYWORDS, "solveCubic(coeffs[, roots]) -> retval, roots"},
    {"solveLP", (PyCFunction)pyopencv_cv_solveLP, METH_VARARGS | METH_KEYWORDS, "solveLP(Func, Constr, z) -> retval"},
    {"solvePnP", (PyCFunction)pyopencv_cv_solvePnP, METH_VARARGS | METH_KEYWORDS, "solvePnP(objectPoints, imagePoints, cameraMatrix, distCoeffs[, rvec[, tvec[, useExtrinsicGuess[, flags]]]]) -> retval, rvec, tvec"},
    {"solvePnPRansac", (PyCFunction)pyopencv_cv_solvePnPRansac, METH_VARARGS | METH_KEYWORDS, "solvePnPRansac(objectPoints, imagePoints, cameraMatrix, distCoeffs[, rvec[, tvec[, useExtrinsicGuess[, iterationsCount[, reprojectionError[, confidence[, inliers[, flags]]]]]]]]) -> retval, rvec, tvec, inliers"},
    {"solvePoly", (PyCFunction)pyopencv_cv_solvePoly, METH_VARARGS | METH_KEYWORDS, "solvePoly(coeffs[, roots[, maxIters]]) -> retval, roots"},
    {"sort", (PyCFunction)pyopencv_cv_sort, METH_VARARGS | METH_KEYWORDS, "sort(src, flags[, dst]) -> dst"},
    {"sortIdx", (PyCFunction)pyopencv_cv_sortIdx, METH_VARARGS | METH_KEYWORDS, "sortIdx(src, flags[, dst]) -> dst"},
    {"split", (PyCFunction)pyopencv_cv_split, METH_VARARGS | METH_KEYWORDS, "split(m[, mv]) -> mv"},
    {"sqrBoxFilter", (PyCFunction)pyopencv_cv_sqrBoxFilter, METH_VARARGS | METH_KEYWORDS, "sqrBoxFilter(_src, ddepth, ksize[, _dst[, anchor[, normalize[, borderType]]]]) -> _dst"},
    {"sqrt", (PyCFunction)pyopencv_cv_sqrt, METH_VARARGS | METH_KEYWORDS, "sqrt(src[, dst]) -> dst"},
    {"startWindowThread", (PyCFunction)pyopencv_cv_startWindowThread, METH_VARARGS | METH_KEYWORDS, "startWindowThread() -> retval"},
    {"stereoCalibrate", (PyCFunction)pyopencv_cv_stereoCalibrate, METH_VARARGS | METH_KEYWORDS, "stereoCalibrate(objectPoints, imagePoints1, imagePoints2, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize[, R[, T[, E[, F[, flags[, criteria]]]]]]) -> retval, cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, R, T, E, F"},
    {"stereoRectify", (PyCFunction)pyopencv_cv_stereoRectify, METH_VARARGS | METH_KEYWORDS, "stereoRectify(cameraMatrix1, distCoeffs1, cameraMatrix2, distCoeffs2, imageSize, R, T[, R1[, R2[, P1[, P2[, Q[, flags[, alpha[, newImageSize]]]]]]]]) -> R1, R2, P1, P2, Q, validPixROI1, validPixROI2"},
    {"stereoRectifyUncalibrated", (PyCFunction)pyopencv_cv_stereoRectifyUncalibrated, METH_VARARGS | METH_KEYWORDS, "stereoRectifyUncalibrated(points1, points2, F, imgSize[, H1[, H2[, threshold]]]) -> retval, H1, H2"},
    {"stylization", (PyCFunction)pyopencv_cv_stylization, METH_VARARGS | METH_KEYWORDS, "stylization(src[, dst[, sigma_s[, sigma_r]]]) -> dst"},
    {"subtract", (PyCFunction)pyopencv_cv_subtract, METH_VARARGS | METH_KEYWORDS, "subtract(src1, src2[, dst[, mask[, dtype]]]) -> dst"},
    {"sumElems", (PyCFunction)pyopencv_cv_sumElems, METH_VARARGS | METH_KEYWORDS, "sumElems(src) -> retval"},
    {"textureFlattening", (PyCFunction)pyopencv_cv_textureFlattening, METH_VARARGS | METH_KEYWORDS, "textureFlattening(src, mask[, dst[, low_threshold[, high_threshold[, kernel_size]]]]) -> dst"},
    {"threshold", (PyCFunction)pyopencv_cv_threshold, METH_VARARGS | METH_KEYWORDS, "threshold(src, thresh, maxval, type[, dst]) -> retval, dst"},
    {"trace", (PyCFunction)pyopencv_cv_trace, METH_VARARGS | METH_KEYWORDS, "trace(mtx) -> retval"},
    {"transform", (PyCFunction)pyopencv_cv_transform, METH_VARARGS | METH_KEYWORDS, "transform(src, m[, dst]) -> dst"},
    {"transpose", (PyCFunction)pyopencv_cv_transpose, METH_VARARGS | METH_KEYWORDS, "transpose(src[, dst]) -> dst"},
    {"triangulatePoints", (PyCFunction)pyopencv_cv_triangulatePoints, METH_VARARGS | METH_KEYWORDS, "triangulatePoints(projMatr1, projMatr2, projPoints1, projPoints2[, points4D]) -> points4D"},
    {"undistort", (PyCFunction)pyopencv_cv_undistort, METH_VARARGS | METH_KEYWORDS, "undistort(src, cameraMatrix, distCoeffs[, dst[, newCameraMatrix]]) -> dst"},
    {"undistortPoints", (PyCFunction)pyopencv_cv_undistortPoints, METH_VARARGS | METH_KEYWORDS, "undistortPoints(src, cameraMatrix, distCoeffs[, dst[, R[, P]]]) -> dst"},
    {"useOptimized", (PyCFunction)pyopencv_cv_useOptimized, METH_VARARGS | METH_KEYWORDS, "useOptimized() -> retval"},
    {"validateDisparity", (PyCFunction)pyopencv_cv_validateDisparity, METH_VARARGS | METH_KEYWORDS, "validateDisparity(disparity, cost, minDisparity, numberOfDisparities[, disp12MaxDisp]) -> disparity"},
    {"vconcat", (PyCFunction)pyopencv_cv_vconcat, METH_VARARGS | METH_KEYWORDS, "vconcat(src[, dst]) -> dst"},
    {"waitKey", (PyCFunction)pyopencv_cv_waitKey, METH_VARARGS | METH_KEYWORDS, "waitKey([, delay]) -> retval"},
    {"warpAffine", (PyCFunction)pyopencv_cv_warpAffine, METH_VARARGS | METH_KEYWORDS, "warpAffine(src, M, dsize[, dst[, flags[, borderMode[, borderValue]]]]) -> dst"},
    {"warpPerspective", (PyCFunction)pyopencv_cv_warpPerspective, METH_VARARGS | METH_KEYWORDS, "warpPerspective(src, M, dsize[, dst[, flags[, borderMode[, borderValue]]]]) -> dst"},
    {"watershed", (PyCFunction)pyopencv_cv_watershed, METH_VARARGS | METH_KEYWORDS, "watershed(image, markers) -> markers"},
    {NULL, NULL}
};

static ConstDef consts_cv[] = {
    {"ACCESS_FAST", cv::ACCESS_FAST},
    {"ACCESS_MASK", cv::ACCESS_MASK},
    {"ACCESS_READ", cv::ACCESS_READ},
    {"ACCESS_RW", cv::ACCESS_RW},
    {"ACCESS_WRITE", cv::ACCESS_WRITE},
    {"ADAPTIVE_THRESH_GAUSSIAN_C", cv::ADAPTIVE_THRESH_GAUSSIAN_C},
    {"ADAPTIVE_THRESH_MEAN_C", cv::ADAPTIVE_THRESH_MEAN_C},
    {"AKAZE_DESCRIPTOR_KAZE", cv::AKAZE::DESCRIPTOR_KAZE},
    {"AKAZE_DESCRIPTOR_KAZE_UPRIGHT", cv::AKAZE::DESCRIPTOR_KAZE_UPRIGHT},
    {"AKAZE_DESCRIPTOR_MLDB", cv::AKAZE::DESCRIPTOR_MLDB},
    {"AKAZE_DESCRIPTOR_MLDB_UPRIGHT", cv::AKAZE::DESCRIPTOR_MLDB_UPRIGHT},
    {"AgastFeatureDetector_AGAST_5_8", cv::AgastFeatureDetector::AGAST_5_8},
    {"AGAST_FEATURE_DETECTOR_AGAST_5_8", cv::AgastFeatureDetector::AGAST_5_8},
    {"AgastFeatureDetector_AGAST_7_12d", cv::AgastFeatureDetector::AGAST_7_12d},
    {"AGAST_FEATURE_DETECTOR_AGAST_7_12D", cv::AgastFeatureDetector::AGAST_7_12d},
    {"AgastFeatureDetector_AGAST_7_12s", cv::AgastFeatureDetector::AGAST_7_12s},
    {"AGAST_FEATURE_DETECTOR_AGAST_7_12S", cv::AgastFeatureDetector::AGAST_7_12s},
    {"AgastFeatureDetector_NONMAX_SUPPRESSION", cv::AgastFeatureDetector::NONMAX_SUPPRESSION},
    {"AGAST_FEATURE_DETECTOR_NONMAX_SUPPRESSION", cv::AgastFeatureDetector::NONMAX_SUPPRESSION},
    {"AgastFeatureDetector_OAST_9_16", cv::AgastFeatureDetector::OAST_9_16},
    {"AGAST_FEATURE_DETECTOR_OAST_9_16", cv::AgastFeatureDetector::OAST_9_16},
    {"AgastFeatureDetector_THRESHOLD", cv::AgastFeatureDetector::THRESHOLD},
    {"AGAST_FEATURE_DETECTOR_THRESHOLD", cv::AgastFeatureDetector::THRESHOLD},
    {"BORDER_CONSTANT", cv::BORDER_CONSTANT},
    {"BORDER_DEFAULT", cv::BORDER_DEFAULT},
    {"BORDER_ISOLATED", cv::BORDER_ISOLATED},
    {"BORDER_REFLECT", cv::BORDER_REFLECT},
    {"BORDER_REFLECT101", cv::BORDER_REFLECT101},
    {"BORDER_REFLECT_101", cv::BORDER_REFLECT_101},
    {"BORDER_REPLICATE", cv::BORDER_REPLICATE},
    {"BORDER_TRANSPARENT", cv::BORDER_TRANSPARENT},
    {"BORDER_WRAP", cv::BORDER_WRAP},
    {"CALIB_CB_ADAPTIVE_THRESH", cv::CALIB_CB_ADAPTIVE_THRESH},
    {"CALIB_CB_ASYMMETRIC_GRID", cv::CALIB_CB_ASYMMETRIC_GRID},
    {"CALIB_CB_CLUSTERING", cv::CALIB_CB_CLUSTERING},
    {"CALIB_CB_FAST_CHECK", cv::CALIB_CB_FAST_CHECK},
    {"CALIB_CB_FILTER_QUADS", cv::CALIB_CB_FILTER_QUADS},
    {"CALIB_CB_NORMALIZE_IMAGE", cv::CALIB_CB_NORMALIZE_IMAGE},
    {"CALIB_CB_SYMMETRIC_GRID", cv::CALIB_CB_SYMMETRIC_GRID},
    {"CALIB_FIX_ASPECT_RATIO", cv::CALIB_FIX_ASPECT_RATIO},
    {"CALIB_FIX_FOCAL_LENGTH", cv::CALIB_FIX_FOCAL_LENGTH},
    {"CALIB_FIX_INTRINSIC", cv::CALIB_FIX_INTRINSIC},
    {"CALIB_FIX_K1", cv::CALIB_FIX_K1},
    {"CALIB_FIX_K2", cv::CALIB_FIX_K2},
    {"CALIB_FIX_K3", cv::CALIB_FIX_K3},
    {"CALIB_FIX_K4", cv::CALIB_FIX_K4},
    {"CALIB_FIX_K5", cv::CALIB_FIX_K5},
    {"CALIB_FIX_K6", cv::CALIB_FIX_K6},
    {"CALIB_FIX_PRINCIPAL_POINT", cv::CALIB_FIX_PRINCIPAL_POINT},
    {"CALIB_FIX_S1_S2_S3_S4", cv::CALIB_FIX_S1_S2_S3_S4},
    {"CALIB_RATIONAL_MODEL", cv::CALIB_RATIONAL_MODEL},
    {"CALIB_SAME_FOCAL_LENGTH", cv::CALIB_SAME_FOCAL_LENGTH},
    {"CALIB_THIN_PRISM_MODEL", cv::CALIB_THIN_PRISM_MODEL},
    {"CALIB_USE_INTRINSIC_GUESS", cv::CALIB_USE_INTRINSIC_GUESS},
    {"CALIB_ZERO_DISPARITY", cv::CALIB_ZERO_DISPARITY},
    {"CALIB_ZERO_TANGENT_DIST", cv::CALIB_ZERO_TANGENT_DIST},
    {"CAP_ANDROID", cv::CAP_ANDROID},
    {"CAP_ANY", cv::CAP_ANY},
    {"CAP_AVFOUNDATION", cv::CAP_AVFOUNDATION},
    {"CAP_CMU1394", cv::CAP_CMU1394},
    {"CAP_DC1394", cv::CAP_DC1394},
    {"CAP_DSHOW", cv::CAP_DSHOW},
    {"CAP_FIREWARE", cv::CAP_FIREWARE},
    {"CAP_FIREWIRE", cv::CAP_FIREWIRE},
    {"CAP_GIGANETIX", cv::CAP_GIGANETIX},
    {"CAP_GPHOTO2", cv::CAP_GPHOTO2},
    {"CAP_IEEE1394", cv::CAP_IEEE1394},
    {"CAP_INTELPERC", cv::CAP_INTELPERC},
    {"CAP_INTELPERC_DEPTH_GENERATOR", cv::CAP_INTELPERC_DEPTH_GENERATOR},
    {"CAP_INTELPERC_DEPTH_MAP", cv::CAP_INTELPERC_DEPTH_MAP},
    {"CAP_INTELPERC_GENERATORS_MASK", cv::CAP_INTELPERC_GENERATORS_MASK},
    {"CAP_INTELPERC_IMAGE", cv::CAP_INTELPERC_IMAGE},
    {"CAP_INTELPERC_IMAGE_GENERATOR", cv::CAP_INTELPERC_IMAGE_GENERATOR},
    {"CAP_INTELPERC_IR_MAP", cv::CAP_INTELPERC_IR_MAP},
    {"CAP_INTELPERC_UVDEPTH_MAP", cv::CAP_INTELPERC_UVDEPTH_MAP},
    {"CAP_MODE_BGR", cv::CAP_MODE_BGR},
    {"CAP_MODE_GRAY", cv::CAP_MODE_GRAY},
    {"CAP_MODE_RGB", cv::CAP_MODE_RGB},
    {"CAP_MODE_YUYV", cv::CAP_MODE_YUYV},
    {"CAP_MSMF", cv::CAP_MSMF},
    {"CAP_OPENNI", cv::CAP_OPENNI},
    {"CAP_OPENNI2", cv::CAP_OPENNI2},
    {"CAP_OPENNI2_ASUS", cv::CAP_OPENNI2_ASUS},
    {"CAP_OPENNI_ASUS", cv::CAP_OPENNI_ASUS},
    {"CAP_OPENNI_BGR_IMAGE", cv::CAP_OPENNI_BGR_IMAGE},
    {"CAP_OPENNI_DEPTH_GENERATOR", cv::CAP_OPENNI_DEPTH_GENERATOR},
    {"CAP_OPENNI_DEPTH_GENERATOR_BASELINE", cv::CAP_OPENNI_DEPTH_GENERATOR_BASELINE},
    {"CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH", cv::CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH},
    {"CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION", cv::CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION},
    {"CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON", cv::CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON},
    {"CAP_OPENNI_DEPTH_MAP", cv::CAP_OPENNI_DEPTH_MAP},
    {"CAP_OPENNI_DISPARITY_MAP", cv::CAP_OPENNI_DISPARITY_MAP},
    {"CAP_OPENNI_DISPARITY_MAP_32F", cv::CAP_OPENNI_DISPARITY_MAP_32F},
    {"CAP_OPENNI_GENERATORS_MASK", cv::CAP_OPENNI_GENERATORS_MASK},
    {"CAP_OPENNI_GRAY_IMAGE", cv::CAP_OPENNI_GRAY_IMAGE},
    {"CAP_OPENNI_IMAGE_GENERATOR", cv::CAP_OPENNI_IMAGE_GENERATOR},
    {"CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE", cv::CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE},
    {"CAP_OPENNI_IMAGE_GENERATOR_PRESENT", cv::CAP_OPENNI_IMAGE_GENERATOR_PRESENT},
    {"CAP_OPENNI_POINT_CLOUD_MAP", cv::CAP_OPENNI_POINT_CLOUD_MAP},
    {"CAP_OPENNI_QVGA_30HZ", cv::CAP_OPENNI_QVGA_30HZ},
    {"CAP_OPENNI_QVGA_60HZ", cv::CAP_OPENNI_QVGA_60HZ},
    {"CAP_OPENNI_SXGA_15HZ", cv::CAP_OPENNI_SXGA_15HZ},
    {"CAP_OPENNI_SXGA_30HZ", cv::CAP_OPENNI_SXGA_30HZ},
    {"CAP_OPENNI_VALID_DEPTH_MASK", cv::CAP_OPENNI_VALID_DEPTH_MASK},
    {"CAP_OPENNI_VGA_30HZ", cv::CAP_OPENNI_VGA_30HZ},
    {"CAP_PROP_APERTURE", cv::CAP_PROP_APERTURE},
    {"CAP_PROP_AUTO_EXPOSURE", cv::CAP_PROP_AUTO_EXPOSURE},
    {"CAP_PROP_BACKLIGHT", cv::CAP_PROP_BACKLIGHT},
    {"CAP_PROP_BRIGHTNESS", cv::CAP_PROP_BRIGHTNESS},
    {"CAP_PROP_CONTRAST", cv::CAP_PROP_CONTRAST},
    {"CAP_PROP_CONVERT_RGB", cv::CAP_PROP_CONVERT_RGB},
    {"CAP_PROP_DC1394_MAX", cv::CAP_PROP_DC1394_MAX},
    {"CAP_PROP_DC1394_MODE_AUTO", cv::CAP_PROP_DC1394_MODE_AUTO},
    {"CAP_PROP_DC1394_MODE_MANUAL", cv::CAP_PROP_DC1394_MODE_MANUAL},
    {"CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO", cv::CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO},
    {"CAP_PROP_DC1394_OFF", cv::CAP_PROP_DC1394_OFF},
    {"CAP_PROP_EXPOSURE", cv::CAP_PROP_EXPOSURE},
    {"CAP_PROP_EXPOSUREPROGRAM", cv::CAP_PROP_EXPOSUREPROGRAM},
    {"CAP_PROP_FOCUS", cv::CAP_PROP_FOCUS},
    {"CAP_PROP_FORMAT", cv::CAP_PROP_FORMAT},
    {"CAP_PROP_FOURCC", cv::CAP_PROP_FOURCC},
    {"CAP_PROP_FPS", cv::CAP_PROP_FPS},
    {"CAP_PROP_FRAME_COUNT", cv::CAP_PROP_FRAME_COUNT},
    {"CAP_PROP_FRAME_HEIGHT", cv::CAP_PROP_FRAME_HEIGHT},
    {"CAP_PROP_FRAME_WIDTH", cv::CAP_PROP_FRAME_WIDTH},
    {"CAP_PROP_GAIN", cv::CAP_PROP_GAIN},
    {"CAP_PROP_GAMMA", cv::CAP_PROP_GAMMA},
    {"CAP_PROP_GIGA_FRAME_HEIGH_MAX", cv::CAP_PROP_GIGA_FRAME_HEIGH_MAX},
    {"CAP_PROP_GIGA_FRAME_OFFSET_X", cv::CAP_PROP_GIGA_FRAME_OFFSET_X},
    {"CAP_PROP_GIGA_FRAME_OFFSET_Y", cv::CAP_PROP_GIGA_FRAME_OFFSET_Y},
    {"CAP_PROP_GIGA_FRAME_SENS_HEIGH", cv::CAP_PROP_GIGA_FRAME_SENS_HEIGH},
    {"CAP_PROP_GIGA_FRAME_SENS_WIDTH", cv::CAP_PROP_GIGA_FRAME_SENS_WIDTH},
    {"CAP_PROP_GIGA_FRAME_WIDTH_MAX", cv::CAP_PROP_GIGA_FRAME_WIDTH_MAX},
    {"CAP_PROP_GPHOTO2_COLLECT_MSGS", cv::CAP_PROP_GPHOTO2_COLLECT_MSGS},
    {"CAP_PROP_GPHOTO2_FLUSH_MSGS", cv::CAP_PROP_GPHOTO2_FLUSH_MSGS},
    {"CAP_PROP_GPHOTO2_PREVIEW", cv::CAP_PROP_GPHOTO2_PREVIEW},
    {"CAP_PROP_GPHOTO2_RELOAD_CONFIG", cv::CAP_PROP_GPHOTO2_RELOAD_CONFIG},
    {"CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE", cv::CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE},
    {"CAP_PROP_GPHOTO2_WIDGET_ENUMERATE", cv::CAP_PROP_GPHOTO2_WIDGET_ENUMERATE},
    {"CAP_PROP_GSTREAMER_QUEUE_LENGTH", cv::CAP_PROP_GSTREAMER_QUEUE_LENGTH},
    {"CAP_PROP_GUID", cv::CAP_PROP_GUID},
    {"CAP_PROP_HUE", cv::CAP_PROP_HUE},
    {"CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD", cv::CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD},
    {"CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ", cv::CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ},
    {"CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT", cv::CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT},
    {"CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE", cv::CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE},
    {"CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE", cv::CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE},
    {"CAP_PROP_INTELPERC_PROFILE_COUNT", cv::CAP_PROP_INTELPERC_PROFILE_COUNT},
    {"CAP_PROP_INTELPERC_PROFILE_IDX", cv::CAP_PROP_INTELPERC_PROFILE_IDX},
    {"CAP_PROP_IOS_DEVICE_EXPOSURE", cv::CAP_PROP_IOS_DEVICE_EXPOSURE},
    {"CAP_PROP_IOS_DEVICE_FLASH", cv::CAP_PROP_IOS_DEVICE_FLASH},
    {"CAP_PROP_IOS_DEVICE_FOCUS", cv::CAP_PROP_IOS_DEVICE_FOCUS},
    {"CAP_PROP_IOS_DEVICE_TORCH", cv::CAP_PROP_IOS_DEVICE_TORCH},
    {"CAP_PROP_IOS_DEVICE_WHITEBALANCE", cv::CAP_PROP_IOS_DEVICE_WHITEBALANCE},
    {"CAP_PROP_IRIS", cv::CAP_PROP_IRIS},
    {"CAP_PROP_ISO_SPEED", cv::CAP_PROP_ISO_SPEED},
    {"CAP_PROP_MODE", cv::CAP_PROP_MODE},
    {"CAP_PROP_MONOCHROME", cv::CAP_PROP_MONOCHROME},
    {"CAP_PROP_OPENNI2_MIRROR", cv::CAP_PROP_OPENNI2_MIRROR},
    {"CAP_PROP_OPENNI2_SYNC", cv::CAP_PROP_OPENNI2_SYNC},
    {"CAP_PROP_OPENNI_APPROX_FRAME_SYNC", cv::CAP_PROP_OPENNI_APPROX_FRAME_SYNC},
    {"CAP_PROP_OPENNI_BASELINE", cv::CAP_PROP_OPENNI_BASELINE},
    {"CAP_PROP_OPENNI_CIRCLE_BUFFER", cv::CAP_PROP_OPENNI_CIRCLE_BUFFER},
    {"CAP_PROP_OPENNI_FOCAL_LENGTH", cv::CAP_PROP_OPENNI_FOCAL_LENGTH},
    {"CAP_PROP_OPENNI_FRAME_MAX_DEPTH", cv::CAP_PROP_OPENNI_FRAME_MAX_DEPTH},
    {"CAP_PROP_OPENNI_GENERATOR_PRESENT", cv::CAP_PROP_OPENNI_GENERATOR_PRESENT},
    {"CAP_PROP_OPENNI_MAX_BUFFER_SIZE", cv::CAP_PROP_OPENNI_MAX_BUFFER_SIZE},
    {"CAP_PROP_OPENNI_MAX_TIME_DURATION", cv::CAP_PROP_OPENNI_MAX_TIME_DURATION},
    {"CAP_PROP_OPENNI_OUTPUT_MODE", cv::CAP_PROP_OPENNI_OUTPUT_MODE},
    {"CAP_PROP_OPENNI_REGISTRATION", cv::CAP_PROP_OPENNI_REGISTRATION},
    {"CAP_PROP_OPENNI_REGISTRATION_ON", cv::CAP_PROP_OPENNI_REGISTRATION_ON},
    {"CAP_PROP_PAN", cv::CAP_PROP_PAN},
    {"CAP_PROP_POS_AVI_RATIO", cv::CAP_PROP_POS_AVI_RATIO},
    {"CAP_PROP_POS_FRAMES", cv::CAP_PROP_POS_FRAMES},
    {"CAP_PROP_POS_MSEC", cv::CAP_PROP_POS_MSEC},
    {"CAP_PROP_PVAPI_BINNINGX", cv::CAP_PROP_PVAPI_BINNINGX},
    {"CAP_PROP_PVAPI_BINNINGY", cv::CAP_PROP_PVAPI_BINNINGY},
    {"CAP_PROP_PVAPI_DECIMATIONHORIZONTAL", cv::CAP_PROP_PVAPI_DECIMATIONHORIZONTAL},
    {"CAP_PROP_PVAPI_DECIMATIONVERTICAL", cv::CAP_PROP_PVAPI_DECIMATIONVERTICAL},
    {"CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE", cv::CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE},
    {"CAP_PROP_PVAPI_MULTICASTIP", cv::CAP_PROP_PVAPI_MULTICASTIP},
    {"CAP_PROP_PVAPI_PIXELFORMAT", cv::CAP_PROP_PVAPI_PIXELFORMAT},
    {"CAP_PROP_RECTIFICATION", cv::CAP_PROP_RECTIFICATION},
    {"CAP_PROP_ROLL", cv::CAP_PROP_ROLL},
    {"CAP_PROP_SATURATION", cv::CAP_PROP_SATURATION},
    {"CAP_PROP_SETTINGS", cv::CAP_PROP_SETTINGS},
    {"CAP_PROP_SHARPNESS", cv::CAP_PROP_SHARPNESS},
    {"CAP_PROP_SPEED", cv::CAP_PROP_SPEED},
    {"CAP_PROP_TEMPERATURE", cv::CAP_PROP_TEMPERATURE},
    {"CAP_PROP_TILT", cv::CAP_PROP_TILT},
    {"CAP_PROP_TRIGGER", cv::CAP_PROP_TRIGGER},
    {"CAP_PROP_TRIGGER_DELAY", cv::CAP_PROP_TRIGGER_DELAY},
    {"CAP_PROP_VIEWFINDER", cv::CAP_PROP_VIEWFINDER},
    {"CAP_PROP_WHITE_BALANCE_BLUE_U", cv::CAP_PROP_WHITE_BALANCE_BLUE_U},
    {"CAP_PROP_WHITE_BALANCE_RED_V", cv::CAP_PROP_WHITE_BALANCE_RED_V},
    {"CAP_PROP_XI_AEAG", cv::CAP_PROP_XI_AEAG},
    {"CAP_PROP_XI_AEAG_LEVEL", cv::CAP_PROP_XI_AEAG_LEVEL},
    {"CAP_PROP_XI_AE_MAX_LIMIT", cv::CAP_PROP_XI_AE_MAX_LIMIT},
    {"CAP_PROP_XI_AG_MAX_LIMIT", cv::CAP_PROP_XI_AG_MAX_LIMIT},
    {"CAP_PROP_XI_AUTO_WB", cv::CAP_PROP_XI_AUTO_WB},
    {"CAP_PROP_XI_DATA_FORMAT", cv::CAP_PROP_XI_DATA_FORMAT},
    {"CAP_PROP_XI_DOWNSAMPLING", cv::CAP_PROP_XI_DOWNSAMPLING},
    {"CAP_PROP_XI_EXP_PRIORITY", cv::CAP_PROP_XI_EXP_PRIORITY},
    {"CAP_PROP_XI_GPI_LEVEL", cv::CAP_PROP_XI_GPI_LEVEL},
    {"CAP_PROP_XI_GPI_MODE", cv::CAP_PROP_XI_GPI_MODE},
    {"CAP_PROP_XI_GPI_SELECTOR", cv::CAP_PROP_XI_GPI_SELECTOR},
    {"CAP_PROP_XI_GPO_MODE", cv::CAP_PROP_XI_GPO_MODE},
    {"CAP_PROP_XI_GPO_SELECTOR", cv::CAP_PROP_XI_GPO_SELECTOR},
    {"CAP_PROP_XI_LED_MODE", cv::CAP_PROP_XI_LED_MODE},
    {"CAP_PROP_XI_LED_SELECTOR", cv::CAP_PROP_XI_LED_SELECTOR},
    {"CAP_PROP_XI_MANUAL_WB", cv::CAP_PROP_XI_MANUAL_WB},
    {"CAP_PROP_XI_OFFSET_X", cv::CAP_PROP_XI_OFFSET_X},
    {"CAP_PROP_XI_OFFSET_Y", cv::CAP_PROP_XI_OFFSET_Y},
    {"CAP_PROP_XI_TIMEOUT", cv::CAP_PROP_XI_TIMEOUT},
    {"CAP_PROP_XI_TRG_SOFTWARE", cv::CAP_PROP_XI_TRG_SOFTWARE},
    {"CAP_PROP_XI_TRG_SOURCE", cv::CAP_PROP_XI_TRG_SOURCE},
    {"CAP_PROP_ZOOM", cv::CAP_PROP_ZOOM},
    {"CAP_PVAPI", cv::CAP_PVAPI},
    {"CAP_PVAPI_DECIMATION_2OUTOF16", cv::CAP_PVAPI_DECIMATION_2OUTOF16},
    {"CAP_PVAPI_DECIMATION_2OUTOF4", cv::CAP_PVAPI_DECIMATION_2OUTOF4},
    {"CAP_PVAPI_DECIMATION_2OUTOF8", cv::CAP_PVAPI_DECIMATION_2OUTOF8},
    {"CAP_PVAPI_DECIMATION_OFF", cv::CAP_PVAPI_DECIMATION_OFF},
    {"CAP_PVAPI_FSTRIGMODE_FIXEDRATE", cv::CAP_PVAPI_FSTRIGMODE_FIXEDRATE},
    {"CAP_PVAPI_FSTRIGMODE_FREERUN", cv::CAP_PVAPI_FSTRIGMODE_FREERUN},
    {"CAP_PVAPI_FSTRIGMODE_SOFTWARE", cv::CAP_PVAPI_FSTRIGMODE_SOFTWARE},
    {"CAP_PVAPI_FSTRIGMODE_SYNCIN1", cv::CAP_PVAPI_FSTRIGMODE_SYNCIN1},
    {"CAP_PVAPI_FSTRIGMODE_SYNCIN2", cv::CAP_PVAPI_FSTRIGMODE_SYNCIN2},
    {"CAP_PVAPI_PIXELFORMAT_BAYER16", cv::CAP_PVAPI_PIXELFORMAT_BAYER16},
    {"CAP_PVAPI_PIXELFORMAT_BAYER8", cv::CAP_PVAPI_PIXELFORMAT_BAYER8},
    {"CAP_PVAPI_PIXELFORMAT_BGR24", cv::CAP_PVAPI_PIXELFORMAT_BGR24},
    {"CAP_PVAPI_PIXELFORMAT_BGRA32", cv::CAP_PVAPI_PIXELFORMAT_BGRA32},
    {"CAP_PVAPI_PIXELFORMAT_MONO16", cv::CAP_PVAPI_PIXELFORMAT_MONO16},
    {"CAP_PVAPI_PIXELFORMAT_MONO8", cv::CAP_PVAPI_PIXELFORMAT_MONO8},
    {"CAP_PVAPI_PIXELFORMAT_RGB24", cv::CAP_PVAPI_PIXELFORMAT_RGB24},
    {"CAP_PVAPI_PIXELFORMAT_RGBA32", cv::CAP_PVAPI_PIXELFORMAT_RGBA32},
    {"CAP_QT", cv::CAP_QT},
    {"CAP_UNICAP", cv::CAP_UNICAP},
    {"CAP_V4L", cv::CAP_V4L},
    {"CAP_V4L2", cv::CAP_V4L2},
    {"CAP_VFW", cv::CAP_VFW},
    {"CAP_WINRT", cv::CAP_WINRT},
    {"CAP_XIAPI", cv::CAP_XIAPI},
    {"CASCADE_DO_CANNY_PRUNING", cv::CASCADE_DO_CANNY_PRUNING},
    {"CASCADE_DO_ROUGH_SEARCH", cv::CASCADE_DO_ROUGH_SEARCH},
    {"CASCADE_FIND_BIGGEST_OBJECT", cv::CASCADE_FIND_BIGGEST_OBJECT},
    {"CASCADE_SCALE_IMAGE", cv::CASCADE_SCALE_IMAGE},
    {"CC_STAT_AREA", cv::CC_STAT_AREA},
    {"CC_STAT_HEIGHT", cv::CC_STAT_HEIGHT},
    {"CC_STAT_LEFT", cv::CC_STAT_LEFT},
    {"CC_STAT_MAX", cv::CC_STAT_MAX},
    {"CC_STAT_TOP", cv::CC_STAT_TOP},
    {"CC_STAT_WIDTH", cv::CC_STAT_WIDTH},
    {"CHAIN_APPROX_NONE", cv::CHAIN_APPROX_NONE},
    {"CHAIN_APPROX_SIMPLE", cv::CHAIN_APPROX_SIMPLE},
    {"CHAIN_APPROX_TC89_KCOS", cv::CHAIN_APPROX_TC89_KCOS},
    {"CHAIN_APPROX_TC89_L1", cv::CHAIN_APPROX_TC89_L1},
    {"CMP_EQ", cv::CMP_EQ},
    {"CMP_GE", cv::CMP_GE},
    {"CMP_GT", cv::CMP_GT},
    {"CMP_LE", cv::CMP_LE},
    {"CMP_LT", cv::CMP_LT},
    {"CMP_NE", cv::CMP_NE},
    {"COLORMAP_AUTUMN", cv::COLORMAP_AUTUMN},
    {"COLORMAP_BONE", cv::COLORMAP_BONE},
    {"COLORMAP_COOL", cv::COLORMAP_COOL},
    {"COLORMAP_HOT", cv::COLORMAP_HOT},
    {"COLORMAP_HSV", cv::COLORMAP_HSV},
    {"COLORMAP_JET", cv::COLORMAP_JET},
    {"COLORMAP_OCEAN", cv::COLORMAP_OCEAN},
    {"COLORMAP_PARULA", cv::COLORMAP_PARULA},
    {"COLORMAP_PINK", cv::COLORMAP_PINK},
    {"COLORMAP_RAINBOW", cv::COLORMAP_RAINBOW},
    {"COLORMAP_SPRING", cv::COLORMAP_SPRING},
    {"COLORMAP_SUMMER", cv::COLORMAP_SUMMER},
    {"COLORMAP_WINTER", cv::COLORMAP_WINTER},
    {"COLOR_BGR2BGR555", cv::COLOR_BGR2BGR555},
    {"COLOR_BGR2BGR565", cv::COLOR_BGR2BGR565},
    {"COLOR_BGR2BGRA", cv::COLOR_BGR2BGRA},
    {"COLOR_BGR2GRAY", cv::COLOR_BGR2GRAY},
    {"COLOR_BGR2HLS", cv::COLOR_BGR2HLS},
    {"COLOR_BGR2HLS_FULL", cv::COLOR_BGR2HLS_FULL},
    {"COLOR_BGR2HSV", cv::COLOR_BGR2HSV},
    {"COLOR_BGR2HSV_FULL", cv::COLOR_BGR2HSV_FULL},
    {"COLOR_BGR2Lab", cv::COLOR_BGR2Lab},
    {"COLOR_BGR2LAB", cv::COLOR_BGR2Lab},
    {"COLOR_BGR2Luv", cv::COLOR_BGR2Luv},
    {"COLOR_BGR2LUV", cv::COLOR_BGR2Luv},
    {"COLOR_BGR2RGB", cv::COLOR_BGR2RGB},
    {"COLOR_BGR2RGBA", cv::COLOR_BGR2RGBA},
    {"COLOR_BGR2XYZ", cv::COLOR_BGR2XYZ},
    {"COLOR_BGR2YCrCb", cv::COLOR_BGR2YCrCb},
    {"COLOR_BGR2YCR_CB", cv::COLOR_BGR2YCrCb},
    {"COLOR_BGR2YUV", cv::COLOR_BGR2YUV},
    {"COLOR_BGR2YUV_I420", cv::COLOR_BGR2YUV_I420},
    {"COLOR_BGR2YUV_IYUV", cv::COLOR_BGR2YUV_IYUV},
    {"COLOR_BGR2YUV_YV12", cv::COLOR_BGR2YUV_YV12},
    {"COLOR_BGR5552BGR", cv::COLOR_BGR5552BGR},
    {"COLOR_BGR5552BGRA", cv::COLOR_BGR5552BGRA},
    {"COLOR_BGR5552GRAY", cv::COLOR_BGR5552GRAY},
    {"COLOR_BGR5552RGB", cv::COLOR_BGR5552RGB},
    {"COLOR_BGR5552RGBA", cv::COLOR_BGR5552RGBA},
    {"COLOR_BGR5652BGR", cv::COLOR_BGR5652BGR},
    {"COLOR_BGR5652BGRA", cv::COLOR_BGR5652BGRA},
    {"COLOR_BGR5652GRAY", cv::COLOR_BGR5652GRAY},
    {"COLOR_BGR5652RGB", cv::COLOR_BGR5652RGB},
    {"COLOR_BGR5652RGBA", cv::COLOR_BGR5652RGBA},
    {"COLOR_BGRA2BGR", cv::COLOR_BGRA2BGR},
    {"COLOR_BGRA2BGR555", cv::COLOR_BGRA2BGR555},
    {"COLOR_BGRA2BGR565", cv::COLOR_BGRA2BGR565},
    {"COLOR_BGRA2GRAY", cv::COLOR_BGRA2GRAY},
    {"COLOR_BGRA2RGB", cv::COLOR_BGRA2RGB},
    {"COLOR_BGRA2RGBA", cv::COLOR_BGRA2RGBA},
    {"COLOR_BGRA2YUV_I420", cv::COLOR_BGRA2YUV_I420},
    {"COLOR_BGRA2YUV_IYUV", cv::COLOR_BGRA2YUV_IYUV},
    {"COLOR_BGRA2YUV_YV12", cv::COLOR_BGRA2YUV_YV12},
    {"COLOR_BayerBG2BGR", cv::COLOR_BayerBG2BGR},
    {"COLOR_BAYER_BG2BGR", cv::COLOR_BayerBG2BGR},
    {"COLOR_BayerBG2BGR_EA", cv::COLOR_BayerBG2BGR_EA},
    {"COLOR_BAYER_BG2BGR_EA", cv::COLOR_BayerBG2BGR_EA},
    {"COLOR_BayerBG2BGR_VNG", cv::COLOR_BayerBG2BGR_VNG},
    {"COLOR_BAYER_BG2BGR_VNG", cv::COLOR_BayerBG2BGR_VNG},
    {"COLOR_BayerBG2GRAY", cv::COLOR_BayerBG2GRAY},
    {"COLOR_BAYER_BG2GRAY", cv::COLOR_BayerBG2GRAY},
    {"COLOR_BayerBG2RGB", cv::COLOR_BayerBG2RGB},
    {"COLOR_BAYER_BG2RGB", cv::COLOR_BayerBG2RGB},
    {"COLOR_BayerBG2RGB_EA", cv::COLOR_BayerBG2RGB_EA},
    {"COLOR_BAYER_BG2RGB_EA", cv::COLOR_BayerBG2RGB_EA},
    {"COLOR_BayerBG2RGB_VNG", cv::COLOR_BayerBG2RGB_VNG},
    {"COLOR_BAYER_BG2RGB_VNG", cv::COLOR_BayerBG2RGB_VNG},
    {"COLOR_BayerGB2BGR", cv::COLOR_BayerGB2BGR},
    {"COLOR_BAYER_GB2BGR", cv::COLOR_BayerGB2BGR},
    {"COLOR_BayerGB2BGR_EA", cv::COLOR_BayerGB2BGR_EA},
    {"COLOR_BAYER_GB2BGR_EA", cv::COLOR_BayerGB2BGR_EA},
    {"COLOR_BayerGB2BGR_VNG", cv::COLOR_BayerGB2BGR_VNG},
    {"COLOR_BAYER_GB2BGR_VNG", cv::COLOR_BayerGB2BGR_VNG},
    {"COLOR_BayerGB2GRAY", cv::COLOR_BayerGB2GRAY},
    {"COLOR_BAYER_GB2GRAY", cv::COLOR_BayerGB2GRAY},
    {"COLOR_BayerGB2RGB", cv::COLOR_BayerGB2RGB},
    {"COLOR_BAYER_GB2RGB", cv::COLOR_BayerGB2RGB},
    {"COLOR_BayerGB2RGB_EA", cv::COLOR_BayerGB2RGB_EA},
    {"COLOR_BAYER_GB2RGB_EA", cv::COLOR_BayerGB2RGB_EA},
    {"COLOR_BayerGB2RGB_VNG", cv::COLOR_BayerGB2RGB_VNG},
    {"COLOR_BAYER_GB2RGB_VNG", cv::COLOR_BayerGB2RGB_VNG},
    {"COLOR_BayerGR2BGR", cv::COLOR_BayerGR2BGR},
    {"COLOR_BAYER_GR2BGR", cv::COLOR_BayerGR2BGR},
    {"COLOR_BayerGR2BGR_EA", cv::COLOR_BayerGR2BGR_EA},
    {"COLOR_BAYER_GR2BGR_EA", cv::COLOR_BayerGR2BGR_EA},
    {"COLOR_BayerGR2BGR_VNG", cv::COLOR_BayerGR2BGR_VNG},
    {"COLOR_BAYER_GR2BGR_VNG", cv::COLOR_BayerGR2BGR_VNG},
    {"COLOR_BayerGR2GRAY", cv::COLOR_BayerGR2GRAY},
    {"COLOR_BAYER_GR2GRAY", cv::COLOR_BayerGR2GRAY},
    {"COLOR_BayerGR2RGB", cv::COLOR_BayerGR2RGB},
    {"COLOR_BAYER_GR2RGB", cv::COLOR_BayerGR2RGB},
    {"COLOR_BayerGR2RGB_EA", cv::COLOR_BayerGR2RGB_EA},
    {"COLOR_BAYER_GR2RGB_EA", cv::COLOR_BayerGR2RGB_EA},
    {"COLOR_BayerGR2RGB_VNG", cv::COLOR_BayerGR2RGB_VNG},
    {"COLOR_BAYER_GR2RGB_VNG", cv::COLOR_BayerGR2RGB_VNG},
    {"COLOR_BayerRG2BGR", cv::COLOR_BayerRG2BGR},
    {"COLOR_BAYER_RG2BGR", cv::COLOR_BayerRG2BGR},
    {"COLOR_BayerRG2BGR_EA", cv::COLOR_BayerRG2BGR_EA},
    {"COLOR_BAYER_RG2BGR_EA", cv::COLOR_BayerRG2BGR_EA},
    {"COLOR_BayerRG2BGR_VNG", cv::COLOR_BayerRG2BGR_VNG},
    {"COLOR_BAYER_RG2BGR_VNG", cv::COLOR_BayerRG2BGR_VNG},
    {"COLOR_BayerRG2GRAY", cv::COLOR_BayerRG2GRAY},
    {"COLOR_BAYER_RG2GRAY", cv::COLOR_BayerRG2GRAY},
    {"COLOR_BayerRG2RGB", cv::COLOR_BayerRG2RGB},
    {"COLOR_BAYER_RG2RGB", cv::COLOR_BayerRG2RGB},
    {"COLOR_BayerRG2RGB_EA", cv::COLOR_BayerRG2RGB_EA},
    {"COLOR_BAYER_RG2RGB_EA", cv::COLOR_BayerRG2RGB_EA},
    {"COLOR_BayerRG2RGB_VNG", cv::COLOR_BayerRG2RGB_VNG},
    {"COLOR_BAYER_RG2RGB_VNG", cv::COLOR_BayerRG2RGB_VNG},
    {"COLOR_COLORCVT_MAX", cv::COLOR_COLORCVT_MAX},
    {"COLOR_GRAY2BGR", cv::COLOR_GRAY2BGR},
    {"COLOR_GRAY2BGR555", cv::COLOR_GRAY2BGR555},
    {"COLOR_GRAY2BGR565", cv::COLOR_GRAY2BGR565},
    {"COLOR_GRAY2BGRA", cv::COLOR_GRAY2BGRA},
    {"COLOR_GRAY2RGB", cv::COLOR_GRAY2RGB},
    {"COLOR_GRAY2RGBA", cv::COLOR_GRAY2RGBA},
    {"COLOR_HLS2BGR", cv::COLOR_HLS2BGR},
    {"COLOR_HLS2BGR_FULL", cv::COLOR_HLS2BGR_FULL},
    {"COLOR_HLS2RGB", cv::COLOR_HLS2RGB},
    {"COLOR_HLS2RGB_FULL", cv::COLOR_HLS2RGB_FULL},
    {"COLOR_HSV2BGR", cv::COLOR_HSV2BGR},
    {"COLOR_HSV2BGR_FULL", cv::COLOR_HSV2BGR_FULL},
    {"COLOR_HSV2RGB", cv::COLOR_HSV2RGB},
    {"COLOR_HSV2RGB_FULL", cv::COLOR_HSV2RGB_FULL},
    {"COLOR_LBGR2Lab", cv::COLOR_LBGR2Lab},
    {"COLOR_LBGR2LAB", cv::COLOR_LBGR2Lab},
    {"COLOR_LBGR2Luv", cv::COLOR_LBGR2Luv},
    {"COLOR_LBGR2LUV", cv::COLOR_LBGR2Luv},
    {"COLOR_LRGB2Lab", cv::COLOR_LRGB2Lab},
    {"COLOR_LRGB2LAB", cv::COLOR_LRGB2Lab},
    {"COLOR_LRGB2Luv", cv::COLOR_LRGB2Luv},
    {"COLOR_LRGB2LUV", cv::COLOR_LRGB2Luv},
    {"COLOR_Lab2BGR", cv::COLOR_Lab2BGR},
    {"COLOR_LAB2BGR", cv::COLOR_Lab2BGR},
    {"COLOR_Lab2LBGR", cv::COLOR_Lab2LBGR},
    {"COLOR_LAB2LBGR", cv::COLOR_Lab2LBGR},
    {"COLOR_Lab2LRGB", cv::COLOR_Lab2LRGB},
    {"COLOR_LAB2LRGB", cv::COLOR_Lab2LRGB},
    {"COLOR_Lab2RGB", cv::COLOR_Lab2RGB},
    {"COLOR_LAB2RGB", cv::COLOR_Lab2RGB},
    {"COLOR_Luv2BGR", cv::COLOR_Luv2BGR},
    {"COLOR_LUV2BGR", cv::COLOR_Luv2BGR},
    {"COLOR_Luv2LBGR", cv::COLOR_Luv2LBGR},
    {"COLOR_LUV2LBGR", cv::COLOR_Luv2LBGR},
    {"COLOR_Luv2LRGB", cv::COLOR_Luv2LRGB},
    {"COLOR_LUV2LRGB", cv::COLOR_Luv2LRGB},
    {"COLOR_Luv2RGB", cv::COLOR_Luv2RGB},
    {"COLOR_LUV2RGB", cv::COLOR_Luv2RGB},
    {"COLOR_RGB2BGR", cv::COLOR_RGB2BGR},
    {"COLOR_RGB2BGR555", cv::COLOR_RGB2BGR555},
    {"COLOR_RGB2BGR565", cv::COLOR_RGB2BGR565},
    {"COLOR_RGB2BGRA", cv::COLOR_RGB2BGRA},
    {"COLOR_RGB2GRAY", cv::COLOR_RGB2GRAY},
    {"COLOR_RGB2HLS", cv::COLOR_RGB2HLS},
    {"COLOR_RGB2HLS_FULL", cv::COLOR_RGB2HLS_FULL},
    {"COLOR_RGB2HSV", cv::COLOR_RGB2HSV},
    {"COLOR_RGB2HSV_FULL", cv::COLOR_RGB2HSV_FULL},
    {"COLOR_RGB2Lab", cv::COLOR_RGB2Lab},
    {"COLOR_RGB2LAB", cv::COLOR_RGB2Lab},
    {"COLOR_RGB2Luv", cv::COLOR_RGB2Luv},
    {"COLOR_RGB2LUV", cv::COLOR_RGB2Luv},
    {"COLOR_RGB2RGBA", cv::COLOR_RGB2RGBA},
    {"COLOR_RGB2XYZ", cv::COLOR_RGB2XYZ},
    {"COLOR_RGB2YCrCb", cv::COLOR_RGB2YCrCb},
    {"COLOR_RGB2YCR_CB", cv::COLOR_RGB2YCrCb},
    {"COLOR_RGB2YUV", cv::COLOR_RGB2YUV},
    {"COLOR_RGB2YUV_I420", cv::COLOR_RGB2YUV_I420},
    {"COLOR_RGB2YUV_IYUV", cv::COLOR_RGB2YUV_IYUV},
    {"COLOR_RGB2YUV_YV12", cv::COLOR_RGB2YUV_YV12},
    {"COLOR_RGBA2BGR", cv::COLOR_RGBA2BGR},
    {"COLOR_RGBA2BGR555", cv::COLOR_RGBA2BGR555},
    {"COLOR_RGBA2BGR565", cv::COLOR_RGBA2BGR565},
    {"COLOR_RGBA2BGRA", cv::COLOR_RGBA2BGRA},
    {"COLOR_RGBA2GRAY", cv::COLOR_RGBA2GRAY},
    {"COLOR_RGBA2RGB", cv::COLOR_RGBA2RGB},
    {"COLOR_RGBA2YUV_I420", cv::COLOR_RGBA2YUV_I420},
    {"COLOR_RGBA2YUV_IYUV", cv::COLOR_RGBA2YUV_IYUV},
    {"COLOR_RGBA2YUV_YV12", cv::COLOR_RGBA2YUV_YV12},
    {"COLOR_RGBA2mRGBA", cv::COLOR_RGBA2mRGBA},
    {"COLOR_RGBA2M_RGBA", cv::COLOR_RGBA2mRGBA},
    {"COLOR_XYZ2BGR", cv::COLOR_XYZ2BGR},
    {"COLOR_XYZ2RGB", cv::COLOR_XYZ2RGB},
    {"COLOR_YCrCb2BGR", cv::COLOR_YCrCb2BGR},
    {"COLOR_YCR_CB2BGR", cv::COLOR_YCrCb2BGR},
    {"COLOR_YCrCb2RGB", cv::COLOR_YCrCb2RGB},
    {"COLOR_YCR_CB2RGB", cv::COLOR_YCrCb2RGB},
    {"COLOR_YUV2BGR", cv::COLOR_YUV2BGR},
    {"COLOR_YUV2BGRA_I420", cv::COLOR_YUV2BGRA_I420},
    {"COLOR_YUV2BGRA_IYUV", cv::COLOR_YUV2BGRA_IYUV},
    {"COLOR_YUV2BGRA_NV12", cv::COLOR_YUV2BGRA_NV12},
    {"COLOR_YUV2BGRA_NV21", cv::COLOR_YUV2BGRA_NV21},
    {"COLOR_YUV2BGRA_UYNV", cv::COLOR_YUV2BGRA_UYNV},
    {"COLOR_YUV2BGRA_UYVY", cv::COLOR_YUV2BGRA_UYVY},
    {"COLOR_YUV2BGRA_Y422", cv::COLOR_YUV2BGRA_Y422},
    {"COLOR_YUV2BGRA_YUNV", cv::COLOR_YUV2BGRA_YUNV},
    {"COLOR_YUV2BGRA_YUY2", cv::COLOR_YUV2BGRA_YUY2},
    {"COLOR_YUV2BGRA_YUYV", cv::COLOR_YUV2BGRA_YUYV},
    {"COLOR_YUV2BGRA_YV12", cv::COLOR_YUV2BGRA_YV12},
    {"COLOR_YUV2BGRA_YVYU", cv::COLOR_YUV2BGRA_YVYU},
    {"COLOR_YUV2BGR_I420", cv::COLOR_YUV2BGR_I420},
    {"COLOR_YUV2BGR_IYUV", cv::COLOR_YUV2BGR_IYUV},
    {"COLOR_YUV2BGR_NV12", cv::COLOR_YUV2BGR_NV12},
    {"COLOR_YUV2BGR_NV21", cv::COLOR_YUV2BGR_NV21},
    {"COLOR_YUV2BGR_UYNV", cv::COLOR_YUV2BGR_UYNV},
    {"COLOR_YUV2BGR_UYVY", cv::COLOR_YUV2BGR_UYVY},
    {"COLOR_YUV2BGR_Y422", cv::COLOR_YUV2BGR_Y422},
    {"COLOR_YUV2BGR_YUNV", cv::COLOR_YUV2BGR_YUNV},
    {"COLOR_YUV2BGR_YUY2", cv::COLOR_YUV2BGR_YUY2},
    {"COLOR_YUV2BGR_YUYV", cv::COLOR_YUV2BGR_YUYV},
    {"COLOR_YUV2BGR_YV12", cv::COLOR_YUV2BGR_YV12},
    {"COLOR_YUV2BGR_YVYU", cv::COLOR_YUV2BGR_YVYU},
    {"COLOR_YUV2GRAY_420", cv::COLOR_YUV2GRAY_420},
    {"COLOR_YUV2GRAY_I420", cv::COLOR_YUV2GRAY_I420},
    {"COLOR_YUV2GRAY_IYUV", cv::COLOR_YUV2GRAY_IYUV},
    {"COLOR_YUV2GRAY_NV12", cv::COLOR_YUV2GRAY_NV12},
    {"COLOR_YUV2GRAY_NV21", cv::COLOR_YUV2GRAY_NV21},
    {"COLOR_YUV2GRAY_UYNV", cv::COLOR_YUV2GRAY_UYNV},
    {"COLOR_YUV2GRAY_UYVY", cv::COLOR_YUV2GRAY_UYVY},
    {"COLOR_YUV2GRAY_Y422", cv::COLOR_YUV2GRAY_Y422},
    {"COLOR_YUV2GRAY_YUNV", cv::COLOR_YUV2GRAY_YUNV},
    {"COLOR_YUV2GRAY_YUY2", cv::COLOR_YUV2GRAY_YUY2},
    {"COLOR_YUV2GRAY_YUYV", cv::COLOR_YUV2GRAY_YUYV},
    {"COLOR_YUV2GRAY_YV12", cv::COLOR_YUV2GRAY_YV12},
    {"COLOR_YUV2GRAY_YVYU", cv::COLOR_YUV2GRAY_YVYU},
    {"COLOR_YUV2RGB", cv::COLOR_YUV2RGB},
    {"COLOR_YUV2RGBA_I420", cv::COLOR_YUV2RGBA_I420},
    {"COLOR_YUV2RGBA_IYUV", cv::COLOR_YUV2RGBA_IYUV},
    {"COLOR_YUV2RGBA_NV12", cv::COLOR_YUV2RGBA_NV12},
    {"COLOR_YUV2RGBA_NV21", cv::COLOR_YUV2RGBA_NV21},
    {"COLOR_YUV2RGBA_UYNV", cv::COLOR_YUV2RGBA_UYNV},
    {"COLOR_YUV2RGBA_UYVY", cv::COLOR_YUV2RGBA_UYVY},
    {"COLOR_YUV2RGBA_Y422", cv::COLOR_YUV2RGBA_Y422},
    {"COLOR_YUV2RGBA_YUNV", cv::COLOR_YUV2RGBA_YUNV},
    {"COLOR_YUV2RGBA_YUY2", cv::COLOR_YUV2RGBA_YUY2},
    {"COLOR_YUV2RGBA_YUYV", cv::COLOR_YUV2RGBA_YUYV},
    {"COLOR_YUV2RGBA_YV12", cv::COLOR_YUV2RGBA_YV12},
    {"COLOR_YUV2RGBA_YVYU", cv::COLOR_YUV2RGBA_YVYU},
    {"COLOR_YUV2RGB_I420", cv::COLOR_YUV2RGB_I420},
    {"COLOR_YUV2RGB_IYUV", cv::COLOR_YUV2RGB_IYUV},
    {"COLOR_YUV2RGB_NV12", cv::COLOR_YUV2RGB_NV12},
    {"COLOR_YUV2RGB_NV21", cv::COLOR_YUV2RGB_NV21},
    {"COLOR_YUV2RGB_UYNV", cv::COLOR_YUV2RGB_UYNV},
    {"COLOR_YUV2RGB_UYVY", cv::COLOR_YUV2RGB_UYVY},
    {"COLOR_YUV2RGB_Y422", cv::COLOR_YUV2RGB_Y422},
    {"COLOR_YUV2RGB_YUNV", cv::COLOR_YUV2RGB_YUNV},
    {"COLOR_YUV2RGB_YUY2", cv::COLOR_YUV2RGB_YUY2},
    {"COLOR_YUV2RGB_YUYV", cv::COLOR_YUV2RGB_YUYV},
    {"COLOR_YUV2RGB_YV12", cv::COLOR_YUV2RGB_YV12},
    {"COLOR_YUV2RGB_YVYU", cv::COLOR_YUV2RGB_YVYU},
    {"COLOR_YUV420p2BGR", cv::COLOR_YUV420p2BGR},
    {"COLOR_YUV420P2BGR", cv::COLOR_YUV420p2BGR},
    {"COLOR_YUV420p2BGRA", cv::COLOR_YUV420p2BGRA},
    {"COLOR_YUV420P2BGRA", cv::COLOR_YUV420p2BGRA},
    {"COLOR_YUV420p2GRAY", cv::COLOR_YUV420p2GRAY},
    {"COLOR_YUV420P2GRAY", cv::COLOR_YUV420p2GRAY},
    {"COLOR_YUV420p2RGB", cv::COLOR_YUV420p2RGB},
    {"COLOR_YUV420P2RGB", cv::COLOR_YUV420p2RGB},
    {"COLOR_YUV420p2RGBA", cv::COLOR_YUV420p2RGBA},
    {"COLOR_YUV420P2RGBA", cv::COLOR_YUV420p2RGBA},
    {"COLOR_YUV420sp2BGR", cv::COLOR_YUV420sp2BGR},
    {"COLOR_YUV420SP2BGR", cv::COLOR_YUV420sp2BGR},
    {"COLOR_YUV420sp2BGRA", cv::COLOR_YUV420sp2BGRA},
    {"COLOR_YUV420SP2BGRA", cv::COLOR_YUV420sp2BGRA},
    {"COLOR_YUV420sp2GRAY", cv::COLOR_YUV420sp2GRAY},
    {"COLOR_YUV420SP2GRAY", cv::COLOR_YUV420sp2GRAY},
    {"COLOR_YUV420sp2RGB", cv::COLOR_YUV420sp2RGB},
    {"COLOR_YUV420SP2RGB", cv::COLOR_YUV420sp2RGB},
    {"COLOR_YUV420sp2RGBA", cv::COLOR_YUV420sp2RGBA},
    {"COLOR_YUV420SP2RGBA", cv::COLOR_YUV420sp2RGBA},
    {"COLOR_mRGBA2RGBA", cv::COLOR_mRGBA2RGBA},
    {"COLOR_M_RGBA2RGBA", cv::COLOR_mRGBA2RGBA},
    {"COVAR_COLS", cv::COVAR_COLS},
    {"COVAR_NORMAL", cv::COVAR_NORMAL},
    {"COVAR_ROWS", cv::COVAR_ROWS},
    {"COVAR_SCALE", cv::COVAR_SCALE},
    {"COVAR_SCRAMBLED", cv::COVAR_SCRAMBLED},
    {"COVAR_USE_AVG", cv::COVAR_USE_AVG},
    {"CPU_AVX", cv::CPU_AVX},
    {"CPU_AVX2", cv::CPU_AVX2},
    {"CPU_AVX_512BW", cv::CPU_AVX_512BW},
    {"CPU_AVX_512CD", cv::CPU_AVX_512CD},
    {"CPU_AVX_512DQ", cv::CPU_AVX_512DQ},
    {"CPU_AVX_512ER", cv::CPU_AVX_512ER},
    {"CPU_AVX_512F", cv::CPU_AVX_512F},
    {"CPU_AVX_512IFMA512", cv::CPU_AVX_512IFMA512},
    {"CPU_AVX_512PF", cv::CPU_AVX_512PF},
    {"CPU_AVX_512VBMI", cv::CPU_AVX_512VBMI},
    {"CPU_AVX_512VL", cv::CPU_AVX_512VL},
    {"CPU_FMA3", cv::CPU_FMA3},
    {"CPU_MMX", cv::CPU_MMX},
    {"CPU_NEON", cv::CPU_NEON},
    {"CPU_POPCNT", cv::CPU_POPCNT},
    {"CPU_SSE", cv::CPU_SSE},
    {"CPU_SSE2", cv::CPU_SSE2},
    {"CPU_SSE3", cv::CPU_SSE3},
    {"CPU_SSE4_1", cv::CPU_SSE4_1},
    {"CPU_SSE4_2", cv::CPU_SSE4_2},
    {"CPU_SSSE3", cv::CPU_SSSE3},
    {"DCT_INVERSE", cv::DCT_INVERSE},
    {"DCT_ROWS", cv::DCT_ROWS},
    {"DECOMP_CHOLESKY", cv::DECOMP_CHOLESKY},
    {"DECOMP_EIG", cv::DECOMP_EIG},
    {"DECOMP_LU", cv::DECOMP_LU},
    {"DECOMP_NORMAL", cv::DECOMP_NORMAL},
    {"DECOMP_QR", cv::DECOMP_QR},
    {"DECOMP_SVD", cv::DECOMP_SVD},
    {"DFT_COMPLEX_OUTPUT", cv::DFT_COMPLEX_OUTPUT},
    {"DFT_INVERSE", cv::DFT_INVERSE},
    {"DFT_REAL_OUTPUT", cv::DFT_REAL_OUTPUT},
    {"DFT_ROWS", cv::DFT_ROWS},
    {"DFT_SCALE", cv::DFT_SCALE},
    {"DIST_C", cv::DIST_C},
    {"DIST_FAIR", cv::DIST_FAIR},
    {"DIST_HUBER", cv::DIST_HUBER},
    {"DIST_L1", cv::DIST_L1},
    {"DIST_L12", cv::DIST_L12},
    {"DIST_L2", cv::DIST_L2},
    {"DIST_LABEL_CCOMP", cv::DIST_LABEL_CCOMP},
    {"DIST_LABEL_PIXEL", cv::DIST_LABEL_PIXEL},
    {"DIST_MASK_3", cv::DIST_MASK_3},
    {"DIST_MASK_5", cv::DIST_MASK_5},
    {"DIST_MASK_PRECISE", cv::DIST_MASK_PRECISE},
    {"DIST_USER", cv::DIST_USER},
    {"DIST_WELSCH", cv::DIST_WELSCH},
    {"DetectionBasedTracker_DETECTED", cv::DetectionBasedTracker::DETECTED},
    {"DETECTION_BASED_TRACKER_DETECTED", cv::DetectionBasedTracker::DETECTED},
    {"DetectionBasedTracker_DETECTED_NOT_SHOWN_YET", cv::DetectionBasedTracker::DETECTED_NOT_SHOWN_YET},
    {"DETECTION_BASED_TRACKER_DETECTED_NOT_SHOWN_YET", cv::DetectionBasedTracker::DETECTED_NOT_SHOWN_YET},
    {"DetectionBasedTracker_DETECTED_TEMPORARY_LOST", cv::DetectionBasedTracker::DETECTED_TEMPORARY_LOST},
    {"DETECTION_BASED_TRACKER_DETECTED_TEMPORARY_LOST", cv::DetectionBasedTracker::DETECTED_TEMPORARY_LOST},
    {"DetectionBasedTracker_WRONG_OBJECT", cv::DetectionBasedTracker::WRONG_OBJECT},
    {"DETECTION_BASED_TRACKER_WRONG_OBJECT", cv::DetectionBasedTracker::WRONG_OBJECT},
    {"DrawMatchesFlags_DEFAULT", cv::DrawMatchesFlags::DEFAULT},
    {"DRAW_MATCHES_FLAGS_DEFAULT", cv::DrawMatchesFlags::DEFAULT},
    {"DrawMatchesFlags_DRAW_OVER_OUTIMG", cv::DrawMatchesFlags::DRAW_OVER_OUTIMG},
    {"DRAW_MATCHES_FLAGS_DRAW_OVER_OUTIMG", cv::DrawMatchesFlags::DRAW_OVER_OUTIMG},
    {"DrawMatchesFlags_DRAW_RICH_KEYPOINTS", cv::DrawMatchesFlags::DRAW_RICH_KEYPOINTS},
    {"DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS", cv::DrawMatchesFlags::DRAW_RICH_KEYPOINTS},
    {"DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS", cv::DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS},
    {"DRAW_MATCHES_FLAGS_NOT_DRAW_SINGLE_POINTS", cv::DrawMatchesFlags::NOT_DRAW_SINGLE_POINTS},
    {"EVENT_FLAG_ALTKEY", cv::EVENT_FLAG_ALTKEY},
    {"EVENT_FLAG_CTRLKEY", cv::EVENT_FLAG_CTRLKEY},
    {"EVENT_FLAG_LBUTTON", cv::EVENT_FLAG_LBUTTON},
    {"EVENT_FLAG_MBUTTON", cv::EVENT_FLAG_MBUTTON},
    {"EVENT_FLAG_RBUTTON", cv::EVENT_FLAG_RBUTTON},
    {"EVENT_FLAG_SHIFTKEY", cv::EVENT_FLAG_SHIFTKEY},
    {"EVENT_LBUTTONDBLCLK", cv::EVENT_LBUTTONDBLCLK},
    {"EVENT_LBUTTONDOWN", cv::EVENT_LBUTTONDOWN},
    {"EVENT_LBUTTONUP", cv::EVENT_LBUTTONUP},
    {"EVENT_MBUTTONDBLCLK", cv::EVENT_MBUTTONDBLCLK},
    {"EVENT_MBUTTONDOWN", cv::EVENT_MBUTTONDOWN},
    {"EVENT_MBUTTONUP", cv::EVENT_MBUTTONUP},
    {"EVENT_MOUSEHWHEEL", cv::EVENT_MOUSEHWHEEL},
    {"EVENT_MOUSEMOVE", cv::EVENT_MOUSEMOVE},
    {"EVENT_MOUSEWHEEL", cv::EVENT_MOUSEWHEEL},
    {"EVENT_RBUTTONDBLCLK", cv::EVENT_RBUTTONDBLCLK},
    {"EVENT_RBUTTONDOWN", cv::EVENT_RBUTTONDOWN},
    {"EVENT_RBUTTONUP", cv::EVENT_RBUTTONUP},
    {"FILLED", cv::FILLED},
    {"FLOODFILL_FIXED_RANGE", cv::FLOODFILL_FIXED_RANGE},
    {"FLOODFILL_MASK_ONLY", cv::FLOODFILL_MASK_ONLY},
    {"FM_7POINT", cv::FM_7POINT},
    {"FM_8POINT", cv::FM_8POINT},
    {"FM_LMEDS", cv::FM_LMEDS},
    {"FM_RANSAC", cv::FM_RANSAC},
    {"FONT_HERSHEY_COMPLEX", cv::FONT_HERSHEY_COMPLEX},
    {"FONT_HERSHEY_COMPLEX_SMALL", cv::FONT_HERSHEY_COMPLEX_SMALL},
    {"FONT_HERSHEY_DUPLEX", cv::FONT_HERSHEY_DUPLEX},
    {"FONT_HERSHEY_PLAIN", cv::FONT_HERSHEY_PLAIN},
    {"FONT_HERSHEY_SCRIPT_COMPLEX", cv::FONT_HERSHEY_SCRIPT_COMPLEX},
    {"FONT_HERSHEY_SCRIPT_SIMPLEX", cv::FONT_HERSHEY_SCRIPT_SIMPLEX},
    {"FONT_HERSHEY_SIMPLEX", cv::FONT_HERSHEY_SIMPLEX},
    {"FONT_HERSHEY_TRIPLEX", cv::FONT_HERSHEY_TRIPLEX},
    {"FONT_ITALIC", cv::FONT_ITALIC},
    {"FastFeatureDetector_FAST_N", cv::FastFeatureDetector::FAST_N},
    {"FAST_FEATURE_DETECTOR_FAST_N", cv::FastFeatureDetector::FAST_N},
    {"FastFeatureDetector_NONMAX_SUPPRESSION", cv::FastFeatureDetector::NONMAX_SUPPRESSION},
    {"FAST_FEATURE_DETECTOR_NONMAX_SUPPRESSION", cv::FastFeatureDetector::NONMAX_SUPPRESSION},
    {"FastFeatureDetector_THRESHOLD", cv::FastFeatureDetector::THRESHOLD},
    {"FAST_FEATURE_DETECTOR_THRESHOLD", cv::FastFeatureDetector::THRESHOLD},
    {"FastFeatureDetector_TYPE_5_8", cv::FastFeatureDetector::TYPE_5_8},
    {"FAST_FEATURE_DETECTOR_TYPE_5_8", cv::FastFeatureDetector::TYPE_5_8},
    {"FastFeatureDetector_TYPE_7_12", cv::FastFeatureDetector::TYPE_7_12},
    {"FAST_FEATURE_DETECTOR_TYPE_7_12", cv::FastFeatureDetector::TYPE_7_12},
    {"FastFeatureDetector_TYPE_9_16", cv::FastFeatureDetector::TYPE_9_16},
    {"FAST_FEATURE_DETECTOR_TYPE_9_16", cv::FastFeatureDetector::TYPE_9_16},
    {"FileNode_EMPTY", cv::FileNode::EMPTY},
    {"FILE_NODE_EMPTY", cv::FileNode::EMPTY},
    {"FileNode_FLOAT", cv::FileNode::FLOAT},
    {"FILE_NODE_FLOAT", cv::FileNode::FLOAT},
    {"FileNode_FLOW", cv::FileNode::FLOW},
    {"FILE_NODE_FLOW", cv::FileNode::FLOW},
    {"FileNode_INT", cv::FileNode::INT},
    {"FILE_NODE_INT", cv::FileNode::INT},
    {"FileNode_MAP", cv::FileNode::MAP},
    {"FILE_NODE_MAP", cv::FileNode::MAP},
    {"FileNode_NAMED", cv::FileNode::NAMED},
    {"FILE_NODE_NAMED", cv::FileNode::NAMED},
    {"FileNode_NONE", cv::FileNode::NONE},
    {"FILE_NODE_NONE", cv::FileNode::NONE},
    {"FileNode_REAL", cv::FileNode::REAL},
    {"FILE_NODE_REAL", cv::FileNode::REAL},
    {"FileNode_REF", cv::FileNode::REF},
    {"FILE_NODE_REF", cv::FileNode::REF},
    {"FileNode_SEQ", cv::FileNode::SEQ},
    {"FILE_NODE_SEQ", cv::FileNode::SEQ},
    {"FileNode_STR", cv::FileNode::STR},
    {"FILE_NODE_STR", cv::FileNode::STR},
    {"FileNode_STRING", cv::FileNode::STRING},
    {"FILE_NODE_STRING", cv::FileNode::STRING},
    {"FileNode_TYPE_MASK", cv::FileNode::TYPE_MASK},
    {"FILE_NODE_TYPE_MASK", cv::FileNode::TYPE_MASK},
    {"FileNode_USER", cv::FileNode::USER},
    {"FILE_NODE_USER", cv::FileNode::USER},
    {"FileStorage_APPEND", cv::FileStorage::APPEND},
    {"FILE_STORAGE_APPEND", cv::FileStorage::APPEND},
    {"FileStorage_FORMAT_AUTO", cv::FileStorage::FORMAT_AUTO},
    {"FILE_STORAGE_FORMAT_AUTO", cv::FileStorage::FORMAT_AUTO},
    {"FileStorage_FORMAT_MASK", cv::FileStorage::FORMAT_MASK},
    {"FILE_STORAGE_FORMAT_MASK", cv::FileStorage::FORMAT_MASK},
    {"FileStorage_FORMAT_XML", cv::FileStorage::FORMAT_XML},
    {"FILE_STORAGE_FORMAT_XML", cv::FileStorage::FORMAT_XML},
    {"FileStorage_FORMAT_YAML", cv::FileStorage::FORMAT_YAML},
    {"FILE_STORAGE_FORMAT_YAML", cv::FileStorage::FORMAT_YAML},
    {"FileStorage_INSIDE_MAP", cv::FileStorage::INSIDE_MAP},
    {"FILE_STORAGE_INSIDE_MAP", cv::FileStorage::INSIDE_MAP},
    {"FileStorage_MEMORY", cv::FileStorage::MEMORY},
    {"FILE_STORAGE_MEMORY", cv::FileStorage::MEMORY},
    {"FileStorage_NAME_EXPECTED", cv::FileStorage::NAME_EXPECTED},
    {"FILE_STORAGE_NAME_EXPECTED", cv::FileStorage::NAME_EXPECTED},
    {"FileStorage_READ", cv::FileStorage::READ},
    {"FILE_STORAGE_READ", cv::FileStorage::READ},
    {"FileStorage_UNDEFINED", cv::FileStorage::UNDEFINED},
    {"FILE_STORAGE_UNDEFINED", cv::FileStorage::UNDEFINED},
    {"FileStorage_VALUE_EXPECTED", cv::FileStorage::VALUE_EXPECTED},
    {"FILE_STORAGE_VALUE_EXPECTED", cv::FileStorage::VALUE_EXPECTED},
    {"FileStorage_WRITE", cv::FileStorage::WRITE},
    {"FILE_STORAGE_WRITE", cv::FileStorage::WRITE},
    {"Formatter_FMT_C", cv::Formatter::FMT_C},
    {"FORMATTER_FMT_C", cv::Formatter::FMT_C},
    {"Formatter_FMT_CSV", cv::Formatter::FMT_CSV},
    {"FORMATTER_FMT_CSV", cv::Formatter::FMT_CSV},
    {"Formatter_FMT_DEFAULT", cv::Formatter::FMT_DEFAULT},
    {"FORMATTER_FMT_DEFAULT", cv::Formatter::FMT_DEFAULT},
    {"Formatter_FMT_MATLAB", cv::Formatter::FMT_MATLAB},
    {"FORMATTER_FMT_MATLAB", cv::Formatter::FMT_MATLAB},
    {"Formatter_FMT_NUMPY", cv::Formatter::FMT_NUMPY},
    {"FORMATTER_FMT_NUMPY", cv::Formatter::FMT_NUMPY},
    {"Formatter_FMT_PYTHON", cv::Formatter::FMT_PYTHON},
    {"FORMATTER_FMT_PYTHON", cv::Formatter::FMT_PYTHON},
    {"GC_BGD", cv::GC_BGD},
    {"GC_EVAL", cv::GC_EVAL},
    {"GC_FGD", cv::GC_FGD},
    {"GC_INIT_WITH_MASK", cv::GC_INIT_WITH_MASK},
    {"GC_INIT_WITH_RECT", cv::GC_INIT_WITH_RECT},
    {"GC_PR_BGD", cv::GC_PR_BGD},
    {"GC_PR_FGD", cv::GC_PR_FGD},
    {"GEMM_1_T", cv::GEMM_1_T},
    {"GEMM_2_T", cv::GEMM_2_T},
    {"GEMM_3_T", cv::GEMM_3_T},
    {"HISTCMP_BHATTACHARYYA", cv::HISTCMP_BHATTACHARYYA},
    {"HISTCMP_CHISQR", cv::HISTCMP_CHISQR},
    {"HISTCMP_CHISQR_ALT", cv::HISTCMP_CHISQR_ALT},
    {"HISTCMP_CORREL", cv::HISTCMP_CORREL},
    {"HISTCMP_HELLINGER", cv::HISTCMP_HELLINGER},
    {"HISTCMP_INTERSECT", cv::HISTCMP_INTERSECT},
    {"HISTCMP_KL_DIV", cv::HISTCMP_KL_DIV},
    {"HOGDescriptor_DEFAULT_NLEVELS", cv::HOGDescriptor::DEFAULT_NLEVELS},
    {"HOGDESCRIPTOR_DEFAULT_NLEVELS", cv::HOGDescriptor::DEFAULT_NLEVELS},
    {"HOGDescriptor_L2Hys", cv::HOGDescriptor::L2Hys},
    {"HOGDESCRIPTOR_L2HYS", cv::HOGDescriptor::L2Hys},
    {"HOUGH_GRADIENT", cv::HOUGH_GRADIENT},
    {"HOUGH_MULTI_SCALE", cv::HOUGH_MULTI_SCALE},
    {"HOUGH_PROBABILISTIC", cv::HOUGH_PROBABILISTIC},
    {"HOUGH_STANDARD", cv::HOUGH_STANDARD},
    {"Hamming_normType", cv::Hamming::normType},
    {"HAMMING_NORM_TYPE", cv::Hamming::normType},
    {"IMREAD_ANYCOLOR", cv::IMREAD_ANYCOLOR},
    {"IMREAD_ANYDEPTH", cv::IMREAD_ANYDEPTH},
    {"IMREAD_COLOR", cv::IMREAD_COLOR},
    {"IMREAD_GRAYSCALE", cv::IMREAD_GRAYSCALE},
    {"IMREAD_LOAD_GDAL", cv::IMREAD_LOAD_GDAL},
    {"IMREAD_UNCHANGED", cv::IMREAD_UNCHANGED},
    {"IMWRITE_JPEG_CHROMA_QUALITY", cv::IMWRITE_JPEG_CHROMA_QUALITY},
    {"IMWRITE_JPEG_LUMA_QUALITY", cv::IMWRITE_JPEG_LUMA_QUALITY},
    {"IMWRITE_JPEG_OPTIMIZE", cv::IMWRITE_JPEG_OPTIMIZE},
    {"IMWRITE_JPEG_PROGRESSIVE", cv::IMWRITE_JPEG_PROGRESSIVE},
    {"IMWRITE_JPEG_QUALITY", cv::IMWRITE_JPEG_QUALITY},
    {"IMWRITE_JPEG_RST_INTERVAL", cv::IMWRITE_JPEG_RST_INTERVAL},
    {"IMWRITE_PNG_BILEVEL", cv::IMWRITE_PNG_BILEVEL},
    {"IMWRITE_PNG_COMPRESSION", cv::IMWRITE_PNG_COMPRESSION},
    {"IMWRITE_PNG_STRATEGY", cv::IMWRITE_PNG_STRATEGY},
    {"IMWRITE_PNG_STRATEGY_DEFAULT", cv::IMWRITE_PNG_STRATEGY_DEFAULT},
    {"IMWRITE_PNG_STRATEGY_FILTERED", cv::IMWRITE_PNG_STRATEGY_FILTERED},
    {"IMWRITE_PNG_STRATEGY_FIXED", cv::IMWRITE_PNG_STRATEGY_FIXED},
    {"IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY", cv::IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY},
    {"IMWRITE_PNG_STRATEGY_RLE", cv::IMWRITE_PNG_STRATEGY_RLE},
    {"IMWRITE_PXM_BINARY", cv::IMWRITE_PXM_BINARY},
    {"IMWRITE_WEBP_QUALITY", cv::IMWRITE_WEBP_QUALITY},
    {"INPAINT_NS", cv::INPAINT_NS},
    {"INPAINT_TELEA", cv::INPAINT_TELEA},
    {"INTERSECT_FULL", cv::INTERSECT_FULL},
    {"INTERSECT_NONE", cv::INTERSECT_NONE},
    {"INTERSECT_PARTIAL", cv::INTERSECT_PARTIAL},
    {"INTER_AREA", cv::INTER_AREA},
    {"INTER_BITS", cv::INTER_BITS},
    {"INTER_BITS2", cv::INTER_BITS2},
    {"INTER_CUBIC", cv::INTER_CUBIC},
    {"INTER_LANCZOS4", cv::INTER_LANCZOS4},
    {"INTER_LINEAR", cv::INTER_LINEAR},
    {"INTER_MAX", cv::INTER_MAX},
    {"INTER_NEAREST", cv::INTER_NEAREST},
    {"INTER_TAB_SIZE", cv::INTER_TAB_SIZE},
    {"INTER_TAB_SIZE2", cv::INTER_TAB_SIZE2},
    {"KAZE_DIFF_CHARBONNIER", cv::KAZE::DIFF_CHARBONNIER},
    {"KAZE_DIFF_PM_G1", cv::KAZE::DIFF_PM_G1},
    {"KAZE_DIFF_PM_G2", cv::KAZE::DIFF_PM_G2},
    {"KAZE_DIFF_WEICKERT", cv::KAZE::DIFF_WEICKERT},
    {"KMEANS_PP_CENTERS", cv::KMEANS_PP_CENTERS},
    {"KMEANS_RANDOM_CENTERS", cv::KMEANS_RANDOM_CENTERS},
    {"KMEANS_USE_INITIAL_LABELS", cv::KMEANS_USE_INITIAL_LABELS},
    {"LDR_SIZE", cv::LDR_SIZE},
    {"LINE_4", cv::LINE_4},
    {"LINE_8", cv::LINE_8},
    {"LINE_AA", cv::LINE_AA},
    {"LMEDS", cv::LMEDS},
    {"LSD_REFINE_ADV", cv::LSD_REFINE_ADV},
    {"LSD_REFINE_NONE", cv::LSD_REFINE_NONE},
    {"LSD_REFINE_STD", cv::LSD_REFINE_STD},
    {"MIXED_CLONE", cv::MIXED_CLONE},
    {"MONOCHROME_TRANSFER", cv::MONOCHROME_TRANSFER},
    {"MORPH_BLACKHAT", cv::MORPH_BLACKHAT},
    {"MORPH_CLOSE", cv::MORPH_CLOSE},
    {"MORPH_CROSS", cv::MORPH_CROSS},
    {"MORPH_DILATE", cv::MORPH_DILATE},
    {"MORPH_ELLIPSE", cv::MORPH_ELLIPSE},
    {"MORPH_ERODE", cv::MORPH_ERODE},
    {"MORPH_GRADIENT", cv::MORPH_GRADIENT},
    {"MORPH_OPEN", cv::MORPH_OPEN},
    {"MORPH_RECT", cv::MORPH_RECT},
    {"MORPH_TOPHAT", cv::MORPH_TOPHAT},
    {"MOTION_AFFINE", cv::MOTION_AFFINE},
    {"MOTION_EUCLIDEAN", cv::MOTION_EUCLIDEAN},
    {"MOTION_HOMOGRAPHY", cv::MOTION_HOMOGRAPHY},
    {"MOTION_TRANSLATION", cv::MOTION_TRANSLATION},
    {"Mat_AUTO_STEP", cv::Mat::AUTO_STEP},
    {"MAT_AUTO_STEP", cv::Mat::AUTO_STEP},
    {"Mat_CONTINUOUS_FLAG", cv::Mat::CONTINUOUS_FLAG},
    {"MAT_CONTINUOUS_FLAG", cv::Mat::CONTINUOUS_FLAG},
    {"Mat_DEPTH_MASK", cv::Mat::DEPTH_MASK},
    {"MAT_DEPTH_MASK", cv::Mat::DEPTH_MASK},
    {"Mat_MAGIC_MASK", cv::Mat::MAGIC_MASK},
    {"MAT_MAGIC_MASK", cv::Mat::MAGIC_MASK},
    {"Mat_MAGIC_VAL", cv::Mat::MAGIC_VAL},
    {"MAT_MAGIC_VAL", cv::Mat::MAGIC_VAL},
    {"Mat_SUBMATRIX_FLAG", cv::Mat::SUBMATRIX_FLAG},
    {"MAT_SUBMATRIX_FLAG", cv::Mat::SUBMATRIX_FLAG},
    {"Mat_TYPE_MASK", cv::Mat::TYPE_MASK},
    {"MAT_TYPE_MASK", cv::Mat::TYPE_MASK},
    {"NORMAL_CLONE", cv::NORMAL_CLONE},
    {"NORMCONV_FILTER", cv::NORMCONV_FILTER},
    {"NORM_HAMMING", cv::NORM_HAMMING},
    {"NORM_HAMMING2", cv::NORM_HAMMING2},
    {"NORM_INF", cv::NORM_INF},
    {"NORM_L1", cv::NORM_L1},
    {"NORM_L2", cv::NORM_L2},
    {"NORM_L2SQR", cv::NORM_L2SQR},
    {"NORM_MINMAX", cv::NORM_MINMAX},
    {"NORM_RELATIVE", cv::NORM_RELATIVE},
    {"NORM_TYPE_MASK", cv::NORM_TYPE_MASK},
    {"OPTFLOW_FARNEBACK_GAUSSIAN", cv::OPTFLOW_FARNEBACK_GAUSSIAN},
    {"OPTFLOW_LK_GET_MIN_EIGENVALS", cv::OPTFLOW_LK_GET_MIN_EIGENVALS},
    {"OPTFLOW_USE_INITIAL_FLOW", cv::OPTFLOW_USE_INITIAL_FLOW},
    {"ORB_FAST_SCORE", cv::ORB::FAST_SCORE},
    {"ORB_HARRIS_SCORE", cv::ORB::HARRIS_SCORE},
    {"ORB_kBytes", cv::ORB::kBytes},
    {"ORB_K_BYTES", cv::ORB::kBytes},
    {"PCA_DATA_AS_COL", cv::PCA::DATA_AS_COL},
    {"PCA_DATA_AS_ROW", cv::PCA::DATA_AS_ROW},
    {"PCA_USE_AVG", cv::PCA::USE_AVG},
    {"PROJ_SPHERICAL_EQRECT", cv::PROJ_SPHERICAL_EQRECT},
    {"PROJ_SPHERICAL_ORTHO", cv::PROJ_SPHERICAL_ORTHO},
    {"Param_ALGORITHM", cv::Param::ALGORITHM},
    {"PARAM_ALGORITHM", cv::Param::ALGORITHM},
    {"Param_BOOLEAN", cv::Param::BOOLEAN},
    {"PARAM_BOOLEAN", cv::Param::BOOLEAN},
    {"Param_FLOAT", cv::Param::FLOAT},
    {"PARAM_FLOAT", cv::Param::FLOAT},
    {"Param_INT", cv::Param::INT},
    {"PARAM_INT", cv::Param::INT},
    {"Param_MAT", cv::Param::MAT},
    {"PARAM_MAT", cv::Param::MAT},
    {"Param_MAT_VECTOR", cv::Param::MAT_VECTOR},
    {"PARAM_MAT_VECTOR", cv::Param::MAT_VECTOR},
    {"Param_REAL", cv::Param::REAL},
    {"PARAM_REAL", cv::Param::REAL},
    {"Param_STRING", cv::Param::STRING},
    {"PARAM_STRING", cv::Param::STRING},
    {"Param_UCHAR", cv::Param::UCHAR},
    {"PARAM_UCHAR", cv::Param::UCHAR},
    {"Param_UINT64", cv::Param::UINT64},
    {"PARAM_UINT64", cv::Param::UINT64},
    {"Param_UNSIGNED_INT", cv::Param::UNSIGNED_INT},
    {"PARAM_UNSIGNED_INT", cv::Param::UNSIGNED_INT},
    {"QT_CHECKBOX", cv::QT_CHECKBOX},
    {"QT_FONT_BLACK", cv::QT_FONT_BLACK},
    {"QT_FONT_BOLD", cv::QT_FONT_BOLD},
    {"QT_FONT_DEMIBOLD", cv::QT_FONT_DEMIBOLD},
    {"QT_FONT_LIGHT", cv::QT_FONT_LIGHT},
    {"QT_FONT_NORMAL", cv::QT_FONT_NORMAL},
    {"QT_PUSH_BUTTON", cv::QT_PUSH_BUTTON},
    {"QT_RADIOBOX", cv::QT_RADIOBOX},
    {"QT_STYLE_ITALIC", cv::QT_STYLE_ITALIC},
    {"QT_STYLE_NORMAL", cv::QT_STYLE_NORMAL},
    {"QT_STYLE_OBLIQUE", cv::QT_STYLE_OBLIQUE},
    {"RANSAC", cv::RANSAC},
    {"RECURS_FILTER", cv::RECURS_FILTER},
    {"REDUCE_AVG", cv::REDUCE_AVG},
    {"REDUCE_MAX", cv::REDUCE_MAX},
    {"REDUCE_MIN", cv::REDUCE_MIN},
    {"REDUCE_SUM", cv::REDUCE_SUM},
    {"RETR_CCOMP", cv::RETR_CCOMP},
    {"RETR_EXTERNAL", cv::RETR_EXTERNAL},
    {"RETR_FLOODFILL", cv::RETR_FLOODFILL},
    {"RETR_LIST", cv::RETR_LIST},
    {"RETR_TREE", cv::RETR_TREE},
    {"RHO", cv::RHO},
    {"RNG_NORMAL", cv::RNG::NORMAL},
    {"RNG_UNIFORM", cv::RNG::UNIFORM},
    {"SOLVELP_MULTI", cv::SOLVELP_MULTI},
    {"SOLVELP_SINGLE", cv::SOLVELP_SINGLE},
    {"SOLVELP_UNBOUNDED", cv::SOLVELP_UNBOUNDED},
    {"SOLVELP_UNFEASIBLE", cv::SOLVELP_UNFEASIBLE},
    {"SOLVEPNP_DLS", cv::SOLVEPNP_DLS},
    {"SOLVEPNP_EPNP", cv::SOLVEPNP_EPNP},
    {"SOLVEPNP_ITERATIVE", cv::SOLVEPNP_ITERATIVE},
    {"SOLVEPNP_P3P", cv::SOLVEPNP_P3P},
    {"SOLVEPNP_UPNP", cv::SOLVEPNP_UPNP},
    {"SORT_ASCENDING", cv::SORT_ASCENDING},
    {"SORT_DESCENDING", cv::SORT_DESCENDING},
    {"SORT_EVERY_COLUMN", cv::SORT_EVERY_COLUMN},
    {"SORT_EVERY_ROW", cv::SORT_EVERY_ROW},
    {"SVD_FULL_UV", cv::SVD::FULL_UV},
    {"SVD_MODIFY_A", cv::SVD::MODIFY_A},
    {"SVD_NO_UV", cv::SVD::NO_UV},
    {"SparseMat_HASH_BIT", cv::SparseMat::HASH_BIT},
    {"SPARSE_MAT_HASH_BIT", cv::SparseMat::HASH_BIT},
    {"SparseMat_HASH_SCALE", cv::SparseMat::HASH_SCALE},
    {"SPARSE_MAT_HASH_SCALE", cv::SparseMat::HASH_SCALE},
    {"SparseMat_MAGIC_VAL", cv::SparseMat::MAGIC_VAL},
    {"SPARSE_MAT_MAGIC_VAL", cv::SparseMat::MAGIC_VAL},
    {"SparseMat_MAX_DIM", cv::SparseMat::MAX_DIM},
    {"SPARSE_MAT_MAX_DIM", cv::SparseMat::MAX_DIM},
    {"StereoBM_PREFILTER_NORMALIZED_RESPONSE", cv::StereoBM::PREFILTER_NORMALIZED_RESPONSE},
    {"STEREO_BM_PREFILTER_NORMALIZED_RESPONSE", cv::StereoBM::PREFILTER_NORMALIZED_RESPONSE},
    {"StereoBM_PREFILTER_XSOBEL", cv::StereoBM::PREFILTER_XSOBEL},
    {"STEREO_BM_PREFILTER_XSOBEL", cv::StereoBM::PREFILTER_XSOBEL},
    {"StereoMatcher_DISP_SCALE", cv::StereoMatcher::DISP_SCALE},
    {"STEREO_MATCHER_DISP_SCALE", cv::StereoMatcher::DISP_SCALE},
    {"StereoMatcher_DISP_SHIFT", cv::StereoMatcher::DISP_SHIFT},
    {"STEREO_MATCHER_DISP_SHIFT", cv::StereoMatcher::DISP_SHIFT},
    {"StereoSGBM_MODE_HH", cv::StereoSGBM::MODE_HH},
    {"STEREO_SGBM_MODE_HH", cv::StereoSGBM::MODE_HH},
    {"StereoSGBM_MODE_SGBM", cv::StereoSGBM::MODE_SGBM},
    {"STEREO_SGBM_MODE_SGBM", cv::StereoSGBM::MODE_SGBM},
    {"Stitcher_ERR_CAMERA_PARAMS_ADJUST_FAIL", cv::Stitcher::ERR_CAMERA_PARAMS_ADJUST_FAIL},
    {"STITCHER_ERR_CAMERA_PARAMS_ADJUST_FAIL", cv::Stitcher::ERR_CAMERA_PARAMS_ADJUST_FAIL},
    {"Stitcher_ERR_HOMOGRAPHY_EST_FAIL", cv::Stitcher::ERR_HOMOGRAPHY_EST_FAIL},
    {"STITCHER_ERR_HOMOGRAPHY_EST_FAIL", cv::Stitcher::ERR_HOMOGRAPHY_EST_FAIL},
    {"Stitcher_ERR_NEED_MORE_IMGS", cv::Stitcher::ERR_NEED_MORE_IMGS},
    {"STITCHER_ERR_NEED_MORE_IMGS", cv::Stitcher::ERR_NEED_MORE_IMGS},
    {"Stitcher_OK", cv::Stitcher::OK},
    {"STITCHER_OK", cv::Stitcher::OK},
    {"Stitcher_ORIG_RESOL", cv::Stitcher::ORIG_RESOL},
    {"STITCHER_ORIG_RESOL", cv::Stitcher::ORIG_RESOL},
    {"Subdiv2D_NEXT_AROUND_DST", cv::Subdiv2D::NEXT_AROUND_DST},
    {"SUBDIV2D_NEXT_AROUND_DST", cv::Subdiv2D::NEXT_AROUND_DST},
    {"Subdiv2D_NEXT_AROUND_LEFT", cv::Subdiv2D::NEXT_AROUND_LEFT},
    {"SUBDIV2D_NEXT_AROUND_LEFT", cv::Subdiv2D::NEXT_AROUND_LEFT},
    {"Subdiv2D_NEXT_AROUND_ORG", cv::Subdiv2D::NEXT_AROUND_ORG},
    {"SUBDIV2D_NEXT_AROUND_ORG", cv::Subdiv2D::NEXT_AROUND_ORG},
    {"Subdiv2D_NEXT_AROUND_RIGHT", cv::Subdiv2D::NEXT_AROUND_RIGHT},
    {"SUBDIV2D_NEXT_AROUND_RIGHT", cv::Subdiv2D::NEXT_AROUND_RIGHT},
    {"Subdiv2D_PREV_AROUND_DST", cv::Subdiv2D::PREV_AROUND_DST},
    {"SUBDIV2D_PREV_AROUND_DST", cv::Subdiv2D::PREV_AROUND_DST},
    {"Subdiv2D_PREV_AROUND_LEFT", cv::Subdiv2D::PREV_AROUND_LEFT},
    {"SUBDIV2D_PREV_AROUND_LEFT", cv::Subdiv2D::PREV_AROUND_LEFT},
    {"Subdiv2D_PREV_AROUND_ORG", cv::Subdiv2D::PREV_AROUND_ORG},
    {"SUBDIV2D_PREV_AROUND_ORG", cv::Subdiv2D::PREV_AROUND_ORG},
    {"Subdiv2D_PREV_AROUND_RIGHT", cv::Subdiv2D::PREV_AROUND_RIGHT},
    {"SUBDIV2D_PREV_AROUND_RIGHT", cv::Subdiv2D::PREV_AROUND_RIGHT},
    {"Subdiv2D_PTLOC_ERROR", cv::Subdiv2D::PTLOC_ERROR},
    {"SUBDIV2D_PTLOC_ERROR", cv::Subdiv2D::PTLOC_ERROR},
    {"Subdiv2D_PTLOC_INSIDE", cv::Subdiv2D::PTLOC_INSIDE},
    {"SUBDIV2D_PTLOC_INSIDE", cv::Subdiv2D::PTLOC_INSIDE},
    {"Subdiv2D_PTLOC_ON_EDGE", cv::Subdiv2D::PTLOC_ON_EDGE},
    {"SUBDIV2D_PTLOC_ON_EDGE", cv::Subdiv2D::PTLOC_ON_EDGE},
    {"Subdiv2D_PTLOC_OUTSIDE_RECT", cv::Subdiv2D::PTLOC_OUTSIDE_RECT},
    {"SUBDIV2D_PTLOC_OUTSIDE_RECT", cv::Subdiv2D::PTLOC_OUTSIDE_RECT},
    {"Subdiv2D_PTLOC_VERTEX", cv::Subdiv2D::PTLOC_VERTEX},
    {"SUBDIV2D_PTLOC_VERTEX", cv::Subdiv2D::PTLOC_VERTEX},
    {"THRESH_BINARY", cv::THRESH_BINARY},
    {"THRESH_BINARY_INV", cv::THRESH_BINARY_INV},
    {"THRESH_MASK", cv::THRESH_MASK},
    {"THRESH_OTSU", cv::THRESH_OTSU},
    {"THRESH_TOZERO", cv::THRESH_TOZERO},
    {"THRESH_TOZERO_INV", cv::THRESH_TOZERO_INV},
    {"THRESH_TRIANGLE", cv::THRESH_TRIANGLE},
    {"THRESH_TRUNC", cv::THRESH_TRUNC},
    {"TM_CCOEFF", cv::TM_CCOEFF},
    {"TM_CCOEFF_NORMED", cv::TM_CCOEFF_NORMED},
    {"TM_CCORR", cv::TM_CCORR},
    {"TM_CCORR_NORMED", cv::TM_CCORR_NORMED},
    {"TM_SQDIFF", cv::TM_SQDIFF},
    {"TM_SQDIFF_NORMED", cv::TM_SQDIFF_NORMED},
    {"TermCriteria_COUNT", cv::TermCriteria::COUNT},
    {"TERM_CRITERIA_COUNT", cv::TermCriteria::COUNT},
    {"TermCriteria_EPS", cv::TermCriteria::EPS},
    {"TERM_CRITERIA_EPS", cv::TermCriteria::EPS},
    {"TermCriteria_MAX_ITER", cv::TermCriteria::MAX_ITER},
    {"TERM_CRITERIA_MAX_ITER", cv::TermCriteria::MAX_ITER},
    {"UMatData_COPY_ON_MAP", cv::UMatData::COPY_ON_MAP},
    {"UMAT_DATA_COPY_ON_MAP", cv::UMatData::COPY_ON_MAP},
    {"UMatData_DEVICE_COPY_OBSOLETE", cv::UMatData::DEVICE_COPY_OBSOLETE},
    {"UMAT_DATA_DEVICE_COPY_OBSOLETE", cv::UMatData::DEVICE_COPY_OBSOLETE},
    {"UMatData_DEVICE_MEM_MAPPED", cv::UMatData::DEVICE_MEM_MAPPED},
    {"UMAT_DATA_DEVICE_MEM_MAPPED", cv::UMatData::DEVICE_MEM_MAPPED},
    {"UMatData_HOST_COPY_OBSOLETE", cv::UMatData::HOST_COPY_OBSOLETE},
    {"UMAT_DATA_HOST_COPY_OBSOLETE", cv::UMatData::HOST_COPY_OBSOLETE},
    {"UMatData_TEMP_COPIED_UMAT", cv::UMatData::TEMP_COPIED_UMAT},
    {"UMAT_DATA_TEMP_COPIED_UMAT", cv::UMatData::TEMP_COPIED_UMAT},
    {"UMatData_TEMP_UMAT", cv::UMatData::TEMP_UMAT},
    {"UMAT_DATA_TEMP_UMAT", cv::UMatData::TEMP_UMAT},
    {"UMatData_USER_ALLOCATED", cv::UMatData::USER_ALLOCATED},
    {"UMAT_DATA_USER_ALLOCATED", cv::UMatData::USER_ALLOCATED},
    {"UMat_AUTO_STEP", cv::UMat::AUTO_STEP},
    {"UMAT_AUTO_STEP", cv::UMat::AUTO_STEP},
    {"UMat_CONTINUOUS_FLAG", cv::UMat::CONTINUOUS_FLAG},
    {"UMAT_CONTINUOUS_FLAG", cv::UMat::CONTINUOUS_FLAG},
    {"UMat_DEPTH_MASK", cv::UMat::DEPTH_MASK},
    {"UMAT_DEPTH_MASK", cv::UMat::DEPTH_MASK},
    {"UMat_MAGIC_MASK", cv::UMat::MAGIC_MASK},
    {"UMAT_MAGIC_MASK", cv::UMat::MAGIC_MASK},
    {"UMat_MAGIC_VAL", cv::UMat::MAGIC_VAL},
    {"UMAT_MAGIC_VAL", cv::UMat::MAGIC_VAL},
    {"UMat_SUBMATRIX_FLAG", cv::UMat::SUBMATRIX_FLAG},
    {"UMAT_SUBMATRIX_FLAG", cv::UMat::SUBMATRIX_FLAG},
    {"UMat_TYPE_MASK", cv::UMat::TYPE_MASK},
    {"UMAT_TYPE_MASK", cv::UMat::TYPE_MASK},
    {"USAGE_ALLOCATE_DEVICE_MEMORY", cv::USAGE_ALLOCATE_DEVICE_MEMORY},
    {"USAGE_ALLOCATE_HOST_MEMORY", cv::USAGE_ALLOCATE_HOST_MEMORY},
    {"USAGE_ALLOCATE_SHARED_MEMORY", cv::USAGE_ALLOCATE_SHARED_MEMORY},
    {"USAGE_DEFAULT", cv::USAGE_DEFAULT},
    {"VIDEOWRITER_PROP_FRAMEBYTES", cv::VIDEOWRITER_PROP_FRAMEBYTES},
    {"VIDEOWRITER_PROP_QUALITY", cv::VIDEOWRITER_PROP_QUALITY},
    {"WARP_FILL_OUTLIERS", cv::WARP_FILL_OUTLIERS},
    {"WARP_INVERSE_MAP", cv::WARP_INVERSE_MAP},
    {"WINDOW_AUTOSIZE", cv::WINDOW_AUTOSIZE},
    {"WINDOW_FREERATIO", cv::WINDOW_FREERATIO},
    {"WINDOW_FULLSCREEN", cv::WINDOW_FULLSCREEN},
    {"WINDOW_KEEPRATIO", cv::WINDOW_KEEPRATIO},
    {"WINDOW_NORMAL", cv::WINDOW_NORMAL},
    {"WINDOW_OPENGL", cv::WINDOW_OPENGL},
    {"WND_PROP_ASPECT_RATIO", cv::WND_PROP_ASPECT_RATIO},
    {"WND_PROP_AUTOSIZE", cv::WND_PROP_AUTOSIZE},
    {"WND_PROP_FULLSCREEN", cv::WND_PROP_FULLSCREEN},
    {"WND_PROP_OPENGL", cv::WND_PROP_OPENGL},
    {"_InputArray_CUDA_GPU_MAT", cv::_InputArray::CUDA_GPU_MAT},
    {"_INPUT_ARRAY_CUDA_GPU_MAT", cv::_InputArray::CUDA_GPU_MAT},
    {"_InputArray_CUDA_HOST_MEM", cv::_InputArray::CUDA_HOST_MEM},
    {"_INPUT_ARRAY_CUDA_HOST_MEM", cv::_InputArray::CUDA_HOST_MEM},
    {"_InputArray_EXPR", cv::_InputArray::EXPR},
    {"_INPUT_ARRAY_EXPR", cv::_InputArray::EXPR},
    {"_InputArray_FIXED_SIZE", cv::_InputArray::FIXED_SIZE},
    {"_INPUT_ARRAY_FIXED_SIZE", cv::_InputArray::FIXED_SIZE},
    {"_InputArray_FIXED_TYPE", cv::_InputArray::FIXED_TYPE},
    {"_INPUT_ARRAY_FIXED_TYPE", cv::_InputArray::FIXED_TYPE},
    {"_InputArray_KIND_MASK", cv::_InputArray::KIND_MASK},
    {"_INPUT_ARRAY_KIND_MASK", cv::_InputArray::KIND_MASK},
    {"_InputArray_KIND_SHIFT", cv::_InputArray::KIND_SHIFT},
    {"_INPUT_ARRAY_KIND_SHIFT", cv::_InputArray::KIND_SHIFT},
    {"_InputArray_MAT", cv::_InputArray::MAT},
    {"_INPUT_ARRAY_MAT", cv::_InputArray::MAT},
    {"_InputArray_MATX", cv::_InputArray::MATX},
    {"_INPUT_ARRAY_MATX", cv::_InputArray::MATX},
    {"_InputArray_NONE", cv::_InputArray::NONE},
    {"_INPUT_ARRAY_NONE", cv::_InputArray::NONE},
    {"_InputArray_OPENGL_BUFFER", cv::_InputArray::OPENGL_BUFFER},
    {"_INPUT_ARRAY_OPENGL_BUFFER", cv::_InputArray::OPENGL_BUFFER},
    {"_InputArray_STD_BOOL_VECTOR", cv::_InputArray::STD_BOOL_VECTOR},
    {"_INPUT_ARRAY_STD_BOOL_VECTOR", cv::_InputArray::STD_BOOL_VECTOR},
    {"_InputArray_STD_VECTOR", cv::_InputArray::STD_VECTOR},
    {"_INPUT_ARRAY_STD_VECTOR", cv::_InputArray::STD_VECTOR},
    {"_InputArray_STD_VECTOR_MAT", cv::_InputArray::STD_VECTOR_MAT},
    {"_INPUT_ARRAY_STD_VECTOR_MAT", cv::_InputArray::STD_VECTOR_MAT},
    {"_InputArray_STD_VECTOR_UMAT", cv::_InputArray::STD_VECTOR_UMAT},
    {"_INPUT_ARRAY_STD_VECTOR_UMAT", cv::_InputArray::STD_VECTOR_UMAT},
    {"_InputArray_STD_VECTOR_VECTOR", cv::_InputArray::STD_VECTOR_VECTOR},
    {"_INPUT_ARRAY_STD_VECTOR_VECTOR", cv::_InputArray::STD_VECTOR_VECTOR},
    {"_InputArray_UMAT", cv::_InputArray::UMAT},
    {"_INPUT_ARRAY_UMAT", cv::_InputArray::UMAT},
    {"_OutputArray_DEPTH_MASK_16S", cv::_OutputArray::DEPTH_MASK_16S},
    {"_OUTPUT_ARRAY_DEPTH_MASK_16S", cv::_OutputArray::DEPTH_MASK_16S},
    {"_OutputArray_DEPTH_MASK_16U", cv::_OutputArray::DEPTH_MASK_16U},
    {"_OUTPUT_ARRAY_DEPTH_MASK_16U", cv::_OutputArray::DEPTH_MASK_16U},
    {"_OutputArray_DEPTH_MASK_32F", cv::_OutputArray::DEPTH_MASK_32F},
    {"_OUTPUT_ARRAY_DEPTH_MASK_32F", cv::_OutputArray::DEPTH_MASK_32F},
    {"_OutputArray_DEPTH_MASK_32S", cv::_OutputArray::DEPTH_MASK_32S},
    {"_OUTPUT_ARRAY_DEPTH_MASK_32S", cv::_OutputArray::DEPTH_MASK_32S},
    {"_OutputArray_DEPTH_MASK_64F", cv::_OutputArray::DEPTH_MASK_64F},
    {"_OUTPUT_ARRAY_DEPTH_MASK_64F", cv::_OutputArray::DEPTH_MASK_64F},
    {"_OutputArray_DEPTH_MASK_8S", cv::_OutputArray::DEPTH_MASK_8S},
    {"_OUTPUT_ARRAY_DEPTH_MASK_8S", cv::_OutputArray::DEPTH_MASK_8S},
    {"_OutputArray_DEPTH_MASK_8U", cv::_OutputArray::DEPTH_MASK_8U},
    {"_OUTPUT_ARRAY_DEPTH_MASK_8U", cv::_OutputArray::DEPTH_MASK_8U},
    {"_OutputArray_DEPTH_MASK_ALL", cv::_OutputArray::DEPTH_MASK_ALL},
    {"_OUTPUT_ARRAY_DEPTH_MASK_ALL", cv::_OutputArray::DEPTH_MASK_ALL},
    {"_OutputArray_DEPTH_MASK_ALL_BUT_8S", cv::_OutputArray::DEPTH_MASK_ALL_BUT_8S},
    {"_OUTPUT_ARRAY_DEPTH_MASK_ALL_BUT_8S", cv::_OutputArray::DEPTH_MASK_ALL_BUT_8S},
    {"_OutputArray_DEPTH_MASK_FLT", cv::_OutputArray::DEPTH_MASK_FLT},
    {"_OUTPUT_ARRAY_DEPTH_MASK_FLT", cv::_OutputArray::DEPTH_MASK_FLT},
    {"__UMAT_USAGE_FLAGS_32BIT", cv::__UMAT_USAGE_FLAGS_32BIT},
    {NULL, 0}
};

static PyMethodDef methods_Error[] = {
    {NULL, NULL}
};

static ConstDef consts_Error[] = {
    {"BadAlign", cv::Error::BadAlign},
    {"BAD_ALIGN", cv::Error::BadAlign},
    {"BadAlphaChannel", cv::Error::BadAlphaChannel},
    {"BAD_ALPHA_CHANNEL", cv::Error::BadAlphaChannel},
    {"BadCOI", cv::Error::BadCOI},
    {"BAD_COI", cv::Error::BadCOI},
    {"BadCallBack", cv::Error::BadCallBack},
    {"BAD_CALL_BACK", cv::Error::BadCallBack},
    {"BadDataPtr", cv::Error::BadDataPtr},
    {"BAD_DATA_PTR", cv::Error::BadDataPtr},
    {"BadDepth", cv::Error::BadDepth},
    {"BAD_DEPTH", cv::Error::BadDepth},
    {"BadImageSize", cv::Error::BadImageSize},
    {"BAD_IMAGE_SIZE", cv::Error::BadImageSize},
    {"BadModelOrChSeq", cv::Error::BadModelOrChSeq},
    {"BAD_MODEL_OR_CH_SEQ", cv::Error::BadModelOrChSeq},
    {"BadNumChannel1U", cv::Error::BadNumChannel1U},
    {"BAD_NUM_CHANNEL1U", cv::Error::BadNumChannel1U},
    {"BadNumChannels", cv::Error::BadNumChannels},
    {"BAD_NUM_CHANNELS", cv::Error::BadNumChannels},
    {"BadOffset", cv::Error::BadOffset},
    {"BAD_OFFSET", cv::Error::BadOffset},
    {"BadOrder", cv::Error::BadOrder},
    {"BAD_ORDER", cv::Error::BadOrder},
    {"BadOrigin", cv::Error::BadOrigin},
    {"BAD_ORIGIN", cv::Error::BadOrigin},
    {"BadROISize", cv::Error::BadROISize},
    {"BAD_ROISIZE", cv::Error::BadROISize},
    {"BadStep", cv::Error::BadStep},
    {"BAD_STEP", cv::Error::BadStep},
    {"BadTileSize", cv::Error::BadTileSize},
    {"BAD_TILE_SIZE", cv::Error::BadTileSize},
    {"GpuApiCallError", cv::Error::GpuApiCallError},
    {"GPU_API_CALL_ERROR", cv::Error::GpuApiCallError},
    {"GpuNotSupported", cv::Error::GpuNotSupported},
    {"GPU_NOT_SUPPORTED", cv::Error::GpuNotSupported},
    {"HeaderIsNull", cv::Error::HeaderIsNull},
    {"HEADER_IS_NULL", cv::Error::HeaderIsNull},
    {"MaskIsTiled", cv::Error::MaskIsTiled},
    {"MASK_IS_TILED", cv::Error::MaskIsTiled},
    {"OpenCLApiCallError", cv::Error::OpenCLApiCallError},
    {"OPEN_CLAPI_CALL_ERROR", cv::Error::OpenCLApiCallError},
    {"OpenCLDoubleNotSupported", cv::Error::OpenCLDoubleNotSupported},
    {"OPEN_CLDOUBLE_NOT_SUPPORTED", cv::Error::OpenCLDoubleNotSupported},
    {"OpenCLInitError", cv::Error::OpenCLInitError},
    {"OPEN_CLINIT_ERROR", cv::Error::OpenCLInitError},
    {"OpenCLNoAMDBlasFft", cv::Error::OpenCLNoAMDBlasFft},
    {"OPEN_CLNO_AMDBLAS_FFT", cv::Error::OpenCLNoAMDBlasFft},
    {"OpenGlApiCallError", cv::Error::OpenGlApiCallError},
    {"OPEN_GL_API_CALL_ERROR", cv::Error::OpenGlApiCallError},
    {"OpenGlNotSupported", cv::Error::OpenGlNotSupported},
    {"OPEN_GL_NOT_SUPPORTED", cv::Error::OpenGlNotSupported},
    {"StsAssert", cv::Error::StsAssert},
    {"STS_ASSERT", cv::Error::StsAssert},
    {"StsAutoTrace", cv::Error::StsAutoTrace},
    {"STS_AUTO_TRACE", cv::Error::StsAutoTrace},
    {"StsBackTrace", cv::Error::StsBackTrace},
    {"STS_BACK_TRACE", cv::Error::StsBackTrace},
    {"StsBadArg", cv::Error::StsBadArg},
    {"STS_BAD_ARG", cv::Error::StsBadArg},
    {"StsBadFlag", cv::Error::StsBadFlag},
    {"STS_BAD_FLAG", cv::Error::StsBadFlag},
    {"StsBadFunc", cv::Error::StsBadFunc},
    {"STS_BAD_FUNC", cv::Error::StsBadFunc},
    {"StsBadMask", cv::Error::StsBadMask},
    {"STS_BAD_MASK", cv::Error::StsBadMask},
    {"StsBadMemBlock", cv::Error::StsBadMemBlock},
    {"STS_BAD_MEM_BLOCK", cv::Error::StsBadMemBlock},
    {"StsBadPoint", cv::Error::StsBadPoint},
    {"STS_BAD_POINT", cv::Error::StsBadPoint},
    {"StsBadSize", cv::Error::StsBadSize},
    {"STS_BAD_SIZE", cv::Error::StsBadSize},
    {"StsDivByZero", cv::Error::StsDivByZero},
    {"STS_DIV_BY_ZERO", cv::Error::StsDivByZero},
    {"StsError", cv::Error::StsError},
    {"STS_ERROR", cv::Error::StsError},
    {"StsFilterOffsetErr", cv::Error::StsFilterOffsetErr},
    {"STS_FILTER_OFFSET_ERR", cv::Error::StsFilterOffsetErr},
    {"StsFilterStructContentErr", cv::Error::StsFilterStructContentErr},
    {"STS_FILTER_STRUCT_CONTENT_ERR", cv::Error::StsFilterStructContentErr},
    {"StsInplaceNotSupported", cv::Error::StsInplaceNotSupported},
    {"STS_INPLACE_NOT_SUPPORTED", cv::Error::StsInplaceNotSupported},
    {"StsInternal", cv::Error::StsInternal},
    {"STS_INTERNAL", cv::Error::StsInternal},
    {"StsKernelStructContentErr", cv::Error::StsKernelStructContentErr},
    {"STS_KERNEL_STRUCT_CONTENT_ERR", cv::Error::StsKernelStructContentErr},
    {"StsNoConv", cv::Error::StsNoConv},
    {"STS_NO_CONV", cv::Error::StsNoConv},
    {"StsNoMem", cv::Error::StsNoMem},
    {"STS_NO_MEM", cv::Error::StsNoMem},
    {"StsNotImplemented", cv::Error::StsNotImplemented},
    {"STS_NOT_IMPLEMENTED", cv::Error::StsNotImplemented},
    {"StsNullPtr", cv::Error::StsNullPtr},
    {"STS_NULL_PTR", cv::Error::StsNullPtr},
    {"StsObjectNotFound", cv::Error::StsObjectNotFound},
    {"STS_OBJECT_NOT_FOUND", cv::Error::StsObjectNotFound},
    {"StsOk", cv::Error::StsOk},
    {"STS_OK", cv::Error::StsOk},
    {"StsOutOfRange", cv::Error::StsOutOfRange},
    {"STS_OUT_OF_RANGE", cv::Error::StsOutOfRange},
    {"StsParseError", cv::Error::StsParseError},
    {"STS_PARSE_ERROR", cv::Error::StsParseError},
    {"StsUnmatchedFormats", cv::Error::StsUnmatchedFormats},
    {"STS_UNMATCHED_FORMATS", cv::Error::StsUnmatchedFormats},
    {"StsUnmatchedSizes", cv::Error::StsUnmatchedSizes},
    {"STS_UNMATCHED_SIZES", cv::Error::StsUnmatchedSizes},
    {"StsUnsupportedFormat", cv::Error::StsUnsupportedFormat},
    {"STS_UNSUPPORTED_FORMAT", cv::Error::StsUnsupportedFormat},
    {"StsVecLengthErr", cv::Error::StsVecLengthErr},
    {"STS_VEC_LENGTH_ERR", cv::Error::StsVecLengthErr},
    {NULL, 0}
};

static PyMethodDef methods_detail[] = {
    {NULL, NULL}
};

static ConstDef consts_detail[] = {
    {"Blender_FEATHER", cv::detail::Blender::FEATHER},
    {"BLENDER_FEATHER", cv::detail::Blender::FEATHER},
    {"Blender_MULTI_BAND", cv::detail::Blender::MULTI_BAND},
    {"BLENDER_MULTI_BAND", cv::detail::Blender::MULTI_BAND},
    {"Blender_NO", cv::detail::Blender::NO},
    {"BLENDER_NO", cv::detail::Blender::NO},
    {"DpSeamFinder_COLOR", cv::detail::DpSeamFinder::COLOR},
    {"DP_SEAM_FINDER_COLOR", cv::detail::DpSeamFinder::COLOR},
    {"DpSeamFinder_COLOR_GRAD", cv::detail::DpSeamFinder::COLOR_GRAD},
    {"DP_SEAM_FINDER_COLOR_GRAD", cv::detail::DpSeamFinder::COLOR_GRAD},
    {"ExposureCompensator_GAIN", cv::detail::ExposureCompensator::GAIN},
    {"EXPOSURE_COMPENSATOR_GAIN", cv::detail::ExposureCompensator::GAIN},
    {"ExposureCompensator_GAIN_BLOCKS", cv::detail::ExposureCompensator::GAIN_BLOCKS},
    {"EXPOSURE_COMPENSATOR_GAIN_BLOCKS", cv::detail::ExposureCompensator::GAIN_BLOCKS},
    {"ExposureCompensator_NO", cv::detail::ExposureCompensator::NO},
    {"EXPOSURE_COMPENSATOR_NO", cv::detail::ExposureCompensator::NO},
    {"GraphCutSeamFinderBase_COST_COLOR", cv::detail::GraphCutSeamFinderBase::COST_COLOR},
    {"GRAPH_CUT_SEAM_FINDER_BASE_COST_COLOR", cv::detail::GraphCutSeamFinderBase::COST_COLOR},
    {"GraphCutSeamFinderBase_COST_COLOR_GRAD", cv::detail::GraphCutSeamFinderBase::COST_COLOR_GRAD},
    {"GRAPH_CUT_SEAM_FINDER_BASE_COST_COLOR_GRAD", cv::detail::GraphCutSeamFinderBase::COST_COLOR_GRAD},
    {"Timelapser_AS_IS", cv::detail::Timelapser::AS_IS},
    {"TIMELAPSER_AS_IS", cv::detail::Timelapser::AS_IS},
    {"Timelapser_CROP", cv::detail::Timelapser::CROP},
    {"TIMELAPSER_CROP", cv::detail::Timelapser::CROP},
    {"WAVE_CORRECT_HORIZ", cv::detail::WAVE_CORRECT_HORIZ},
    {"WAVE_CORRECT_VERT", cv::detail::WAVE_CORRECT_VERT},
    {NULL, 0}
};

static PyMethodDef methods_fisheye[] = {
    {"calibrate", (PyCFunction)pyopencv_cv_fisheye_calibrate, METH_VARARGS | METH_KEYWORDS, "calibrate(objectPoints, imagePoints, image_size, K, D[, rvecs[, tvecs[, flags[, criteria]]]]) -> retval, K, D, rvecs, tvecs"},
    {"distortPoints", (PyCFunction)pyopencv_cv_fisheye_distortPoints, METH_VARARGS | METH_KEYWORDS, "distortPoints(undistorted, K, D[, distorted[, alpha]]) -> distorted"},
    {"estimateNewCameraMatrixForUndistortRectify", (PyCFunction)pyopencv_cv_fisheye_estimateNewCameraMatrixForUndistortRectify, METH_VARARGS | METH_KEYWORDS, "estimateNewCameraMatrixForUndistortRectify(K, D, image_size, R[, P[, balance[, new_size[, fov_scale]]]]) -> P"},
    {"initUndistortRectifyMap", (PyCFunction)pyopencv_cv_fisheye_initUndistortRectifyMap, METH_VARARGS | METH_KEYWORDS, "initUndistortRectifyMap(K, D, R, P, size, m1type[, map1[, map2]]) -> map1, map2"},
    {"projectPoints", (PyCFunction)pyopencv_cv_fisheye_projectPoints, METH_VARARGS | METH_KEYWORDS, "projectPoints(objectPoints, rvec, tvec, K, D[, imagePoints[, alpha[, jacobian]]]) -> imagePoints, jacobian"},
    {"stereoCalibrate", (PyCFunction)pyopencv_cv_fisheye_stereoCalibrate, METH_VARARGS | METH_KEYWORDS, "stereoCalibrate(objectPoints, imagePoints1, imagePoints2, K1, D1, K2, D2, imageSize[, R[, T[, flags[, criteria]]]]) -> retval, K1, D1, K2, D2, R, T"},
    {"stereoRectify", (PyCFunction)pyopencv_cv_fisheye_stereoRectify, METH_VARARGS | METH_KEYWORDS, "stereoRectify(K1, D1, K2, D2, imageSize, R, tvec, flags[, R1[, R2[, P1[, P2[, Q[, newImageSize[, balance[, fov_scale]]]]]]]]) -> R1, R2, P1, P2, Q"},
    {"undistortImage", (PyCFunction)pyopencv_cv_fisheye_undistortImage, METH_VARARGS | METH_KEYWORDS, "undistortImage(distorted, K, D[, undistorted[, Knew[, new_size]]]) -> undistorted"},
    {"undistortPoints", (PyCFunction)pyopencv_cv_fisheye_undistortPoints, METH_VARARGS | METH_KEYWORDS, "undistortPoints(distorted, K, D[, undistorted[, R[, P]]]) -> undistorted"},
    {NULL, NULL}
};

static ConstDef consts_fisheye[] = {
    {"CALIB_CHECK_COND", cv::fisheye::CALIB_CHECK_COND},
    {"CALIB_FIX_INTRINSIC", cv::fisheye::CALIB_FIX_INTRINSIC},
    {"CALIB_FIX_K1", cv::fisheye::CALIB_FIX_K1},
    {"CALIB_FIX_K2", cv::fisheye::CALIB_FIX_K2},
    {"CALIB_FIX_K3", cv::fisheye::CALIB_FIX_K3},
    {"CALIB_FIX_K4", cv::fisheye::CALIB_FIX_K4},
    {"CALIB_FIX_SKEW", cv::fisheye::CALIB_FIX_SKEW},
    {"CALIB_RECOMPUTE_EXTRINSIC", cv::fisheye::CALIB_RECOMPUTE_EXTRINSIC},
    {"CALIB_USE_INTRINSIC_GUESS", cv::fisheye::CALIB_USE_INTRINSIC_GUESS},
    {NULL, 0}
};

static PyMethodDef methods_flann[] = {
    {"Index", (PyCFunction)pyopencv_cv_flann_flann_Index_Index, METH_VARARGS | METH_KEYWORDS, "Index([features, params[, distType]]) -> <flann_Index object>"},
    {NULL, NULL}
};

static ConstDef consts_flann[] = {
    {NULL, 0}
};

static PyMethodDef methods_ml[] = {
    {"ANN_MLP_create", (PyCFunction)pyopencv_cv_ml_ANN_MLP_create, METH_VARARGS | METH_KEYWORDS, "ANN_MLP_create() -> retval"},
    {"Boost_create", (PyCFunction)pyopencv_cv_ml_Boost_create, METH_VARARGS | METH_KEYWORDS, "Boost_create() -> retval"},
    {"DTrees_create", (PyCFunction)pyopencv_cv_ml_DTrees_create, METH_VARARGS | METH_KEYWORDS, "DTrees_create() -> retval"},
    {"EM_create", (PyCFunction)pyopencv_cv_ml_EM_create, METH_VARARGS | METH_KEYWORDS, "EM_create() -> retval"},
    {"KNearest_create", (PyCFunction)pyopencv_cv_ml_KNearest_create, METH_VARARGS | METH_KEYWORDS, "KNearest_create() -> retval"},
    {"LogisticRegression_create", (PyCFunction)pyopencv_cv_ml_LogisticRegression_create, METH_VARARGS | METH_KEYWORDS, "LogisticRegression_create() -> retval"},
    {"NormalBayesClassifier_create", (PyCFunction)pyopencv_cv_ml_NormalBayesClassifier_create, METH_VARARGS | METH_KEYWORDS, "NormalBayesClassifier_create() -> retval"},
    {"RTrees_create", (PyCFunction)pyopencv_cv_ml_RTrees_create, METH_VARARGS | METH_KEYWORDS, "RTrees_create() -> retval"},
    {"SVM_create", (PyCFunction)pyopencv_cv_ml_SVM_create, METH_VARARGS | METH_KEYWORDS, "SVM_create() -> retval"},
    {"TrainData_create", (PyCFunction)pyopencv_cv_ml_TrainData_create, METH_VARARGS | METH_KEYWORDS, "TrainData_create(samples, layout, responses[, varIdx[, sampleIdx[, sampleWeights[, varType]]]]) -> retval"},
    {"TrainData_getSubVector", (PyCFunction)pyopencv_cv_ml_TrainData_getSubVector, METH_VARARGS | METH_KEYWORDS, "TrainData_getSubVector(vec, idx) -> retval"},
    {NULL, NULL}
};

static ConstDef consts_ml[] = {
    {"ANN_MLP_BACKPROP", cv::ml::ANN_MLP::BACKPROP},
    {"ANN_MLP_GAUSSIAN", cv::ml::ANN_MLP::GAUSSIAN},
    {"ANN_MLP_IDENTITY", cv::ml::ANN_MLP::IDENTITY},
    {"ANN_MLP_NO_INPUT_SCALE", cv::ml::ANN_MLP::NO_INPUT_SCALE},
    {"ANN_MLP_NO_OUTPUT_SCALE", cv::ml::ANN_MLP::NO_OUTPUT_SCALE},
    {"ANN_MLP_RPROP", cv::ml::ANN_MLP::RPROP},
    {"ANN_MLP_SIGMOID_SYM", cv::ml::ANN_MLP::SIGMOID_SYM},
    {"ANN_MLP_UPDATE_WEIGHTS", cv::ml::ANN_MLP::UPDATE_WEIGHTS},
    {"Boost_DISCRETE", cv::ml::Boost::DISCRETE},
    {"BOOST_DISCRETE", cv::ml::Boost::DISCRETE},
    {"Boost_GENTLE", cv::ml::Boost::GENTLE},
    {"BOOST_GENTLE", cv::ml::Boost::GENTLE},
    {"Boost_LOGIT", cv::ml::Boost::LOGIT},
    {"BOOST_LOGIT", cv::ml::Boost::LOGIT},
    {"Boost_REAL", cv::ml::Boost::REAL},
    {"BOOST_REAL", cv::ml::Boost::REAL},
    {"COL_SAMPLE", cv::ml::COL_SAMPLE},
    {"DTrees_PREDICT_AUTO", cv::ml::DTrees::PREDICT_AUTO},
    {"DTREES_PREDICT_AUTO", cv::ml::DTrees::PREDICT_AUTO},
    {"DTrees_PREDICT_MASK", cv::ml::DTrees::PREDICT_MASK},
    {"DTREES_PREDICT_MASK", cv::ml::DTrees::PREDICT_MASK},
    {"DTrees_PREDICT_MAX_VOTE", cv::ml::DTrees::PREDICT_MAX_VOTE},
    {"DTREES_PREDICT_MAX_VOTE", cv::ml::DTrees::PREDICT_MAX_VOTE},
    {"DTrees_PREDICT_SUM", cv::ml::DTrees::PREDICT_SUM},
    {"DTREES_PREDICT_SUM", cv::ml::DTrees::PREDICT_SUM},
    {"EM_COV_MAT_DEFAULT", cv::ml::EM::COV_MAT_DEFAULT},
    {"EM_COV_MAT_DIAGONAL", cv::ml::EM::COV_MAT_DIAGONAL},
    {"EM_COV_MAT_GENERIC", cv::ml::EM::COV_MAT_GENERIC},
    {"EM_COV_MAT_SPHERICAL", cv::ml::EM::COV_MAT_SPHERICAL},
    {"EM_DEFAULT_MAX_ITERS", cv::ml::EM::DEFAULT_MAX_ITERS},
    {"EM_DEFAULT_NCLUSTERS", cv::ml::EM::DEFAULT_NCLUSTERS},
    {"EM_START_AUTO_STEP", cv::ml::EM::START_AUTO_STEP},
    {"EM_START_E_STEP", cv::ml::EM::START_E_STEP},
    {"EM_START_M_STEP", cv::ml::EM::START_M_STEP},
    {"KNearest_BRUTE_FORCE", cv::ml::KNearest::BRUTE_FORCE},
    {"KNEAREST_BRUTE_FORCE", cv::ml::KNearest::BRUTE_FORCE},
    {"KNearest_KDTREE", cv::ml::KNearest::KDTREE},
    {"KNEAREST_KDTREE", cv::ml::KNearest::KDTREE},
    {"LogisticRegression_BATCH", cv::ml::LogisticRegression::BATCH},
    {"LOGISTIC_REGRESSION_BATCH", cv::ml::LogisticRegression::BATCH},
    {"LogisticRegression_MINI_BATCH", cv::ml::LogisticRegression::MINI_BATCH},
    {"LOGISTIC_REGRESSION_MINI_BATCH", cv::ml::LogisticRegression::MINI_BATCH},
    {"LogisticRegression_REG_DISABLE", cv::ml::LogisticRegression::REG_DISABLE},
    {"LOGISTIC_REGRESSION_REG_DISABLE", cv::ml::LogisticRegression::REG_DISABLE},
    {"LogisticRegression_REG_L1", cv::ml::LogisticRegression::REG_L1},
    {"LOGISTIC_REGRESSION_REG_L1", cv::ml::LogisticRegression::REG_L1},
    {"LogisticRegression_REG_L2", cv::ml::LogisticRegression::REG_L2},
    {"LOGISTIC_REGRESSION_REG_L2", cv::ml::LogisticRegression::REG_L2},
    {"ROW_SAMPLE", cv::ml::ROW_SAMPLE},
    {"SVM_C", cv::ml::SVM::C},
    {"SVM_CHI2", cv::ml::SVM::CHI2},
    {"SVM_COEF", cv::ml::SVM::COEF},
    {"SVM_CUSTOM", cv::ml::SVM::CUSTOM},
    {"SVM_C_SVC", cv::ml::SVM::C_SVC},
    {"SVM_DEGREE", cv::ml::SVM::DEGREE},
    {"SVM_EPS_SVR", cv::ml::SVM::EPS_SVR},
    {"SVM_GAMMA", cv::ml::SVM::GAMMA},
    {"SVM_INTER", cv::ml::SVM::INTER},
    {"SVM_LINEAR", cv::ml::SVM::LINEAR},
    {"SVM_NU", cv::ml::SVM::NU},
    {"SVM_NU_SVC", cv::ml::SVM::NU_SVC},
    {"SVM_NU_SVR", cv::ml::SVM::NU_SVR},
    {"SVM_ONE_CLASS", cv::ml::SVM::ONE_CLASS},
    {"SVM_P", cv::ml::SVM::P},
    {"SVM_POLY", cv::ml::SVM::POLY},
    {"SVM_RBF", cv::ml::SVM::RBF},
    {"SVM_SIGMOID", cv::ml::SVM::SIGMOID},
    {"StatModel_COMPRESSED_INPUT", cv::ml::StatModel::COMPRESSED_INPUT},
    {"STAT_MODEL_COMPRESSED_INPUT", cv::ml::StatModel::COMPRESSED_INPUT},
    {"StatModel_PREPROCESSED_INPUT", cv::ml::StatModel::PREPROCESSED_INPUT},
    {"STAT_MODEL_PREPROCESSED_INPUT", cv::ml::StatModel::PREPROCESSED_INPUT},
    {"StatModel_RAW_OUTPUT", cv::ml::StatModel::RAW_OUTPUT},
    {"STAT_MODEL_RAW_OUTPUT", cv::ml::StatModel::RAW_OUTPUT},
    {"StatModel_UPDATE_MODEL", cv::ml::StatModel::UPDATE_MODEL},
    {"STAT_MODEL_UPDATE_MODEL", cv::ml::StatModel::UPDATE_MODEL},
    {"TEST_ERROR", cv::ml::TEST_ERROR},
    {"TRAIN_ERROR", cv::ml::TRAIN_ERROR},
    {"VAR_CATEGORICAL", cv::ml::VAR_CATEGORICAL},
    {"VAR_NUMERICAL", cv::ml::VAR_NUMERICAL},
    {"VAR_ORDERED", cv::ml::VAR_ORDERED},
    {NULL, 0}
};

static PyMethodDef methods_ocl[] = {
    {"finish", (PyCFunction)pyopencv_cv_ocl_finish, METH_VARARGS | METH_KEYWORDS, "finish() -> None"},
    {"haveAmdBlas", (PyCFunction)pyopencv_cv_ocl_haveAmdBlas, METH_VARARGS | METH_KEYWORDS, "haveAmdBlas() -> retval"},
    {"haveAmdFft", (PyCFunction)pyopencv_cv_ocl_haveAmdFft, METH_VARARGS | METH_KEYWORDS, "haveAmdFft() -> retval"},
    {"haveOpenCL", (PyCFunction)pyopencv_cv_ocl_haveOpenCL, METH_VARARGS | METH_KEYWORDS, "haveOpenCL() -> retval"},
    {"setUseOpenCL", (PyCFunction)pyopencv_cv_ocl_setUseOpenCL, METH_VARARGS | METH_KEYWORDS, "setUseOpenCL(flag) -> None"},
    {"useOpenCL", (PyCFunction)pyopencv_cv_ocl_useOpenCL, METH_VARARGS | METH_KEYWORDS, "useOpenCL() -> retval"},
    {NULL, NULL}
};

static ConstDef consts_ocl[] = {
    {"Device_EXEC_KERNEL", cv::ocl::Device::EXEC_KERNEL},
    {"DEVICE_EXEC_KERNEL", cv::ocl::Device::EXEC_KERNEL},
    {"Device_EXEC_NATIVE_KERNEL", cv::ocl::Device::EXEC_NATIVE_KERNEL},
    {"DEVICE_EXEC_NATIVE_KERNEL", cv::ocl::Device::EXEC_NATIVE_KERNEL},
    {"Device_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT", cv::ocl::Device::FP_CORRECTLY_ROUNDED_DIVIDE_SQRT},
    {"DEVICE_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT", cv::ocl::Device::FP_CORRECTLY_ROUNDED_DIVIDE_SQRT},
    {"Device_FP_DENORM", cv::ocl::Device::FP_DENORM},
    {"DEVICE_FP_DENORM", cv::ocl::Device::FP_DENORM},
    {"Device_FP_FMA", cv::ocl::Device::FP_FMA},
    {"DEVICE_FP_FMA", cv::ocl::Device::FP_FMA},
    {"Device_FP_INF_NAN", cv::ocl::Device::FP_INF_NAN},
    {"DEVICE_FP_INF_NAN", cv::ocl::Device::FP_INF_NAN},
    {"Device_FP_ROUND_TO_INF", cv::ocl::Device::FP_ROUND_TO_INF},
    {"DEVICE_FP_ROUND_TO_INF", cv::ocl::Device::FP_ROUND_TO_INF},
    {"Device_FP_ROUND_TO_NEAREST", cv::ocl::Device::FP_ROUND_TO_NEAREST},
    {"DEVICE_FP_ROUND_TO_NEAREST", cv::ocl::Device::FP_ROUND_TO_NEAREST},
    {"Device_FP_ROUND_TO_ZERO", cv::ocl::Device::FP_ROUND_TO_ZERO},
    {"DEVICE_FP_ROUND_TO_ZERO", cv::ocl::Device::FP_ROUND_TO_ZERO},
    {"Device_FP_SOFT_FLOAT", cv::ocl::Device::FP_SOFT_FLOAT},
    {"DEVICE_FP_SOFT_FLOAT", cv::ocl::Device::FP_SOFT_FLOAT},
    {"Device_LOCAL_IS_GLOBAL", cv::ocl::Device::LOCAL_IS_GLOBAL},
    {"DEVICE_LOCAL_IS_GLOBAL", cv::ocl::Device::LOCAL_IS_GLOBAL},
    {"Device_LOCAL_IS_LOCAL", cv::ocl::Device::LOCAL_IS_LOCAL},
    {"DEVICE_LOCAL_IS_LOCAL", cv::ocl::Device::LOCAL_IS_LOCAL},
    {"Device_NO_CACHE", cv::ocl::Device::NO_CACHE},
    {"DEVICE_NO_CACHE", cv::ocl::Device::NO_CACHE},
    {"Device_NO_LOCAL_MEM", cv::ocl::Device::NO_LOCAL_MEM},
    {"DEVICE_NO_LOCAL_MEM", cv::ocl::Device::NO_LOCAL_MEM},
    {"Device_READ_ONLY_CACHE", cv::ocl::Device::READ_ONLY_CACHE},
    {"DEVICE_READ_ONLY_CACHE", cv::ocl::Device::READ_ONLY_CACHE},
    {"Device_READ_WRITE_CACHE", cv::ocl::Device::READ_WRITE_CACHE},
    {"DEVICE_READ_WRITE_CACHE", cv::ocl::Device::READ_WRITE_CACHE},
    {"Device_TYPE_ACCELERATOR", cv::ocl::Device::TYPE_ACCELERATOR},
    {"DEVICE_TYPE_ACCELERATOR", cv::ocl::Device::TYPE_ACCELERATOR},
    {"Device_TYPE_ALL", cv::ocl::Device::TYPE_ALL},
    {"DEVICE_TYPE_ALL", cv::ocl::Device::TYPE_ALL},
    {"Device_TYPE_CPU", cv::ocl::Device::TYPE_CPU},
    {"DEVICE_TYPE_CPU", cv::ocl::Device::TYPE_CPU},
    {"Device_TYPE_DEFAULT", cv::ocl::Device::TYPE_DEFAULT},
    {"DEVICE_TYPE_DEFAULT", cv::ocl::Device::TYPE_DEFAULT},
    {"Device_TYPE_DGPU", cv::ocl::Device::TYPE_DGPU},
    {"DEVICE_TYPE_DGPU", cv::ocl::Device::TYPE_DGPU},
    {"Device_TYPE_GPU", cv::ocl::Device::TYPE_GPU},
    {"DEVICE_TYPE_GPU", cv::ocl::Device::TYPE_GPU},
    {"Device_TYPE_IGPU", cv::ocl::Device::TYPE_IGPU},
    {"DEVICE_TYPE_IGPU", cv::ocl::Device::TYPE_IGPU},
    {"Device_UNKNOWN_VENDOR", cv::ocl::Device::UNKNOWN_VENDOR},
    {"DEVICE_UNKNOWN_VENDOR", cv::ocl::Device::UNKNOWN_VENDOR},
    {"Device_VENDOR_AMD", cv::ocl::Device::VENDOR_AMD},
    {"DEVICE_VENDOR_AMD", cv::ocl::Device::VENDOR_AMD},
    {"Device_VENDOR_INTEL", cv::ocl::Device::VENDOR_INTEL},
    {"DEVICE_VENDOR_INTEL", cv::ocl::Device::VENDOR_INTEL},
    {"Device_VENDOR_NVIDIA", cv::ocl::Device::VENDOR_NVIDIA},
    {"DEVICE_VENDOR_NVIDIA", cv::ocl::Device::VENDOR_NVIDIA},
    {"KernelArg_CONSTANT", cv::ocl::KernelArg::CONSTANT},
    {"KERNEL_ARG_CONSTANT", cv::ocl::KernelArg::CONSTANT},
    {"KernelArg_LOCAL", cv::ocl::KernelArg::LOCAL},
    {"KERNEL_ARG_LOCAL", cv::ocl::KernelArg::LOCAL},
    {"KernelArg_NO_SIZE", cv::ocl::KernelArg::NO_SIZE},
    {"KERNEL_ARG_NO_SIZE", cv::ocl::KernelArg::NO_SIZE},
    {"KernelArg_PTR_ONLY", cv::ocl::KernelArg::PTR_ONLY},
    {"KERNEL_ARG_PTR_ONLY", cv::ocl::KernelArg::PTR_ONLY},
    {"KernelArg_READ_ONLY", cv::ocl::KernelArg::READ_ONLY},
    {"KERNEL_ARG_READ_ONLY", cv::ocl::KernelArg::READ_ONLY},
    {"KernelArg_READ_WRITE", cv::ocl::KernelArg::READ_WRITE},
    {"KERNEL_ARG_READ_WRITE", cv::ocl::KernelArg::READ_WRITE},
    {"KernelArg_WRITE_ONLY", cv::ocl::KernelArg::WRITE_ONLY},
    {"KERNEL_ARG_WRITE_ONLY", cv::ocl::KernelArg::WRITE_ONLY},
    {"OCL_VECTOR_DEFAULT", cv::ocl::OCL_VECTOR_DEFAULT},
    {"OCL_VECTOR_MAX", cv::ocl::OCL_VECTOR_MAX},
    {"OCL_VECTOR_OWN", cv::ocl::OCL_VECTOR_OWN},
    {NULL, 0}
};

static PyMethodDef methods_ogl[] = {
    {NULL, NULL}
};

static ConstDef consts_ogl[] = {
    {"Buffer_ARRAY_BUFFER", cv::ogl::Buffer::ARRAY_BUFFER},
    {"BUFFER_ARRAY_BUFFER", cv::ogl::Buffer::ARRAY_BUFFER},
    {"Buffer_ELEMENT_ARRAY_BUFFER", cv::ogl::Buffer::ELEMENT_ARRAY_BUFFER},
    {"BUFFER_ELEMENT_ARRAY_BUFFER", cv::ogl::Buffer::ELEMENT_ARRAY_BUFFER},
    {"Buffer_PIXEL_PACK_BUFFER", cv::ogl::Buffer::PIXEL_PACK_BUFFER},
    {"BUFFER_PIXEL_PACK_BUFFER", cv::ogl::Buffer::PIXEL_PACK_BUFFER},
    {"Buffer_PIXEL_UNPACK_BUFFER", cv::ogl::Buffer::PIXEL_UNPACK_BUFFER},
    {"BUFFER_PIXEL_UNPACK_BUFFER", cv::ogl::Buffer::PIXEL_UNPACK_BUFFER},
    {"Buffer_READ_ONLY", cv::ogl::Buffer::READ_ONLY},
    {"BUFFER_READ_ONLY", cv::ogl::Buffer::READ_ONLY},
    {"Buffer_READ_WRITE", cv::ogl::Buffer::READ_WRITE},
    {"BUFFER_READ_WRITE", cv::ogl::Buffer::READ_WRITE},
    {"Buffer_WRITE_ONLY", cv::ogl::Buffer::WRITE_ONLY},
    {"BUFFER_WRITE_ONLY", cv::ogl::Buffer::WRITE_ONLY},
    {"LINES", cv::ogl::LINES},
    {"LINE_LOOP", cv::ogl::LINE_LOOP},
    {"LINE_STRIP", cv::ogl::LINE_STRIP},
    {"POINTS", cv::ogl::POINTS},
    {"POLYGON", cv::ogl::POLYGON},
    {"QUADS", cv::ogl::QUADS},
    {"QUAD_STRIP", cv::ogl::QUAD_STRIP},
    {"TRIANGLES", cv::ogl::TRIANGLES},
    {"TRIANGLE_FAN", cv::ogl::TRIANGLE_FAN},
    {"TRIANGLE_STRIP", cv::ogl::TRIANGLE_STRIP},
    {"Texture2D_DEPTH_COMPONENT", cv::ogl::Texture2D::DEPTH_COMPONENT},
    {"TEXTURE2D_DEPTH_COMPONENT", cv::ogl::Texture2D::DEPTH_COMPONENT},
    {"Texture2D_NONE", cv::ogl::Texture2D::NONE},
    {"TEXTURE2D_NONE", cv::ogl::Texture2D::NONE},
    {"Texture2D_RGB", cv::ogl::Texture2D::RGB},
    {"TEXTURE2D_RGB", cv::ogl::Texture2D::RGB},
    {"Texture2D_RGBA", cv::ogl::Texture2D::RGBA},
    {"TEXTURE2D_RGBA", cv::ogl::Texture2D::RGBA},
    {NULL, 0}
};

static PyMethodDef methods_videostab[] = {
    {NULL, NULL}
};

static ConstDef consts_videostab[] = {
    {"MM_AFFINE", cv::videostab::MM_AFFINE},
    {"MM_HOMOGRAPHY", cv::videostab::MM_HOMOGRAPHY},
    {"MM_RIGID", cv::videostab::MM_RIGID},
    {"MM_ROTATION", cv::videostab::MM_ROTATION},
    {"MM_SIMILARITY", cv::videostab::MM_SIMILARITY},
    {"MM_TRANSLATION", cv::videostab::MM_TRANSLATION},
    {"MM_TRANSLATION_AND_SCALE", cv::videostab::MM_TRANSLATION_AND_SCALE},
    {"MM_UNKNOWN", cv::videostab::MM_UNKNOWN},
    {NULL, 0}
};

static void init_submodules(PyObject * root) 
{
  init_submodule(root, MODULESTR"", methods_cv, consts_cv);
  init_submodule(root, MODULESTR".Error", methods_Error, consts_Error);
  init_submodule(root, MODULESTR".detail", methods_detail, consts_detail);
  init_submodule(root, MODULESTR".fisheye", methods_fisheye, consts_fisheye);
  init_submodule(root, MODULESTR".flann", methods_flann, consts_flann);
  init_submodule(root, MODULESTR".ml", methods_ml, consts_ml);
  init_submodule(root, MODULESTR".ocl", methods_ocl, consts_ocl);
  init_submodule(root, MODULESTR".ogl", methods_ogl, consts_ogl);
  init_submodule(root, MODULESTR".videostab", methods_videostab, consts_videostab);
};
